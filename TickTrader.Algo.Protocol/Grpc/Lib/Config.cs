// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TickTrader.Algo.Protocol.Grpc.Lib {

  /// <summary>Holder for reflection information generated from config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb25maWcucHJvdG8SIVRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBj",
            "LkxpYhocZ29vZ2xlX3Byb3Rvcy93cmFwcGVycy5wcm90bxoRZGVzY3JpcHRv",
            "cnMucHJvdG8aCmtleXMucHJvdG8i5gEKCFByb3BlcnR5EhMKC3Byb3BlcnR5",
            "X2lkGAEgASgJEkEKCXBhcmFtZXRlchgKIAEoCzIsLlRpY2tUcmFkZXIuQWxn",
            "by5Qcm90b2NvbC5HcnBjLkxpYi5QYXJhbWV0ZXJIABI5CgVpbnB1dBgLIAEo",
            "CzIoLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5JbnB1dEgA",
            "EjsKBm91dHB1dBgMIAEoCzIpLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5H",
            "cnBjLkxpYi5PdXRwdXRIAEIKCghwcm9wZXJ0eSLKBAoJUGFyYW1ldGVyEkAK",
            "BGJvb2wYCiABKAsyMC5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5M",
            "aWIuQm9vbFBhcmFtZXRlckgAEj4KA2ludBgLIAEoCzIvLlRpY2tUcmFkZXIu",
            "QWxnby5Qcm90b2NvbC5HcnBjLkxpYi5JbnRQYXJhbWV0ZXJIABJLCghudWxs",
            "X2ludBgMIAEoCzI3LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxp",
            "Yi5OdWxsYWJsZUludFBhcmFtZXRlckgAEkQKBmRvdWJsZRgNIAEoCzIyLlRp",
            "Y2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5Eb3VibGVQYXJhbWV0",
            "ZXJIABJRCgtudWxsX2RvdWJsZRgOIAEoCzI6LlRpY2tUcmFkZXIuQWxnby5Q",
            "cm90b2NvbC5HcnBjLkxpYi5OdWxsYWJsZURvdWJsZVBhcmFtZXRlckgAEkQK",
            "BnN0cmluZxgPIAEoCzIyLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBj",
            "LkxpYi5TdHJpbmdQYXJhbWV0ZXJIABJACgRlbnVtGBAgASgLMjAuVGlja1Ry",
            "YWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLkVudW1QYXJhbWV0ZXJIABJA",
            "CgRmaWxlGBEgASgLMjAuVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMu",
            "TGliLkZpbGVQYXJhbWV0ZXJIAEILCglwYXJhbWV0ZXIiHgoNQm9vbFBhcmFt",
            "ZXRlchINCgV2YWx1ZRgBIAEoCCIdCgxJbnRQYXJhbWV0ZXISDQoFdmFsdWUY",
            "ASABKAUiQgoUTnVsbGFibGVJbnRQYXJhbWV0ZXISKgoFdmFsdWUYASABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSIgCg9Eb3VibGVQYXJhbWV0",
            "ZXISDQoFdmFsdWUYASABKAEiRgoXTnVsbGFibGVEb3VibGVQYXJhbWV0ZXIS",
            "KwoFdmFsdWUYASABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUi",
            "IAoPU3RyaW5nUGFyYW1ldGVyEg0KBXZhbHVlGAEgASgJIh4KDUVudW1QYXJh",
            "bWV0ZXISDQoFdmFsdWUYASABKAkiIgoNRmlsZVBhcmFtZXRlchIRCglmaWxl",
            "X25hbWUYASABKAkinwEKDFN5bWJvbENvbmZpZxIMCgRuYW1lGAEgASgJEkwK",
            "Bm9yaWdpbhgCIAEoDjI8LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBj",
            "LkxpYi5TeW1ib2xDb25maWcuU3ltYm9sT3JpZ2luIjMKDFN5bWJvbE9yaWdp",
            "bhIKCgZPTkxJTkUQABIKCgZDVVNUT00QARILCgdTUEVDSUFMEAIi3AEKBUlu",
            "cHV0EkgKD3NlbGVjdGVkX3N5bWJvbBgBIAEoCzIvLlRpY2tUcmFkZXIuQWxn",
            "by5Qcm90b2NvbC5HcnBjLkxpYi5TeW1ib2xDb25maWcSPgoFcXVvdGUYCiAB",
            "KAsyLS5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuUXVvdGVJ",
            "bnB1dEgAEkAKBm1hcHBlZBgLIAEoCzIuLlRpY2tUcmFkZXIuQWxnby5Qcm90",
            "b2NvbC5HcnBjLkxpYi5NYXBwZWRJbnB1dEgAQgcKBWlucHV0IhwKClF1b3Rl",
            "SW5wdXQSDgoGdXNlX2wyGAEgASgIIpMDCgtNYXBwZWRJbnB1dBJHChBzZWxl",
            "Y3RlZF9tYXBwaW5nGAEgASgLMi0uVGlja1RyYWRlci5BbGdvLlByb3RvY29s",
            "LkdycGMuTGliLk1hcHBpbmdLZXkSRgoKYmFyX3RvX2JhchgKIAEoCzIwLlRp",
            "Y2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5CYXJUb0JhcklucHV0",
            "SAASTAoNYmFyX3RvX2RvdWJsZRgLIAEoCzIzLlRpY2tUcmFkZXIuQWxnby5Q",
            "cm90b2NvbC5HcnBjLkxpYi5CYXJUb0RvdWJsZUlucHV0SAASSgoMcXVvdGVf",
            "dG9fYmFyGAwgASgLMjIuVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMu",
            "TGliLlF1b3RlVG9CYXJJbnB1dEgAElAKD3F1b3RlX3RvX2RvdWJsZRgNIAEo",
            "CzI1LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5RdW90ZVRv",
            "RG91YmxlSW5wdXRIAEIHCgVpbnB1dCIPCg1CYXJUb0JhcklucHV0IhIKEEJh",
            "clRvRG91YmxlSW5wdXQiEQoPUXVvdGVUb0JhcklucHV0IhQKElF1b3RlVG9E",
            "b3VibGVJbnB1dCJGCgtPdXRwdXRDb2xvchINCgVhbHBoYRgBIAEoAhILCgNy",
            "ZWQYAiABKAISDQoFZ3JlZW4YAyABKAISDAoEYmx1ZRgEIAEoAiKgAgoGT3V0",
            "cHV0EhIKCmlzX2VuYWJsZWQYASABKAgSQgoKbGluZV9jb2xvchgCIAEoCzIu",
            "LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5PdXRwdXRDb2xv",
            "chIWCg5saW5lX3RoaWNrbmVzcxgDIAEoBRJMCgxjb2xvcmVkX2xpbmUYCiAB",
            "KAsyNC5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuQ29sb3Jl",
            "ZExpbmVPdXRwdXRIABJOCg1tYXJrZXJfc2VyaWVzGAsgASgLMjUuVGlja1Ry",
            "YWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLk1hcmtlclNlcmllc091dHB1",
            "dEgAQggKBm91dHB1dCJjChFDb2xvcmVkTGluZU91dHB1dBJOCgpsaW5lX3N0",
            "eWxlGAIgASgOMjouVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGli",
            "LkFwaURlc2NyaXB0b3IuTGluZVN0eWxlImYKEk1hcmtlclNlcmllc091dHB1",
            "dBJQCgttYXJrZXJfc2l6ZRgCIAEoDjI7LlRpY2tUcmFkZXIuQWxnby5Qcm90",
            "b2NvbC5HcnBjLkxpYi5BcGlEZXNjcmlwdG9yLk1hcmtlclNpemUiPAoRUGx1",
            "Z2luUGVybWlzc2lvbnMSFQoNdHJhZGVfYWxsb3dlZBgBIAEoCBIQCghpc29s",
            "YXRlZBgCIAEoCCLkBAoMUGx1Z2luQ29uZmlnEjkKA2tleRgBIAEoCzIsLlRp",
            "Y2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5QbHVnaW5LZXkSTgoK",
            "dGltZV9mcmFtZRgCIAEoDjI6LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5H",
            "cnBjLkxpYi5BcGlEZXNjcmlwdG9yLlRpbWVGcmFtZRJECgttYWluX3N5bWJv",
            "bBgDIAEoCzIvLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5T",
            "eW1ib2xDb25maWcSRwoQc2VsZWN0ZWRfbWFwcGluZxgEIAEoCzItLlRpY2tU",
            "cmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5NYXBwaW5nS2V5EhMKC2lu",
            "c3RhbmNlX2lkGAUgASgJEkkKC3Blcm1pc3Npb25zGAYgASgLMjQuVGlja1Ry",
            "YWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLlBsdWdpblBlcm1pc3Npb25z",
            "Ej8KCnByb3BlcnRpZXMYByADKAsyKy5UaWNrVHJhZGVyLkFsZ28uUHJvdG9j",
            "b2wuR3JwYy5MaWIuUHJvcGVydHkSRwoJaW5kaWNhdG9yGAogASgLMjIuVGlj",
            "a1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLkluZGljYXRvckNvbmZp",
            "Z0gAEkYKCXRyYWRlX2JvdBgLIAEoCzIxLlRpY2tUcmFkZXIuQWxnby5Qcm90",
            "b2NvbC5HcnBjLkxpYi5UcmFkZUJvdENvbmZpZ0gAQggKBmNvbmZpZyIRCg9J",
            "bmRpY2F0b3JDb25maWciEAoOVHJhZGVCb3RDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor, global::TickTrader.Algo.Protocol.Grpc.Lib.KeysReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.Property), global::TickTrader.Algo.Protocol.Grpc.Lib.Property.Parser, new[]{ "PropertyId", "Parameter", "Input", "Output" }, new[]{ "Property" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter), global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter.Parser, new[]{ "Bool", "Int", "NullInt", "Double", "NullDouble", "String", "Enum", "File" }, new[]{ "Parameter" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter), global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter.Parser, new[]{ "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig), global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig.Parser, new[]{ "Name", "Origin" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig.Types.SymbolOrigin) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.Input), global::TickTrader.Algo.Protocol.Grpc.Lib.Input.Parser, new[]{ "SelectedSymbol", "Quote", "Mapped" }, new[]{ "Input" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput), global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput.Parser, new[]{ "UseL2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput), global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput.Parser, new[]{ "SelectedMapping", "BarToBar", "BarToDouble", "QuoteToBar", "QuoteToDouble" }, new[]{ "Input" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput), global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput), global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput), global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput), global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor), global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor.Parser, new[]{ "Alpha", "Red", "Green", "Blue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.Output), global::TickTrader.Algo.Protocol.Grpc.Lib.Output.Parser, new[]{ "IsEnabled", "LineColor", "LineThickness", "ColoredLine", "MarkerSeries" }, new[]{ "Output" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput), global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput.Parser, new[]{ "LineStyle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput), global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput.Parser, new[]{ "MarkerSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions), global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions.Parser, new[]{ "TradeAllowed", "Isolated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig), global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig.Parser, new[]{ "Key", "TimeFrame", "MainSymbol", "SelectedMapping", "InstanceId", "Permissions", "Properties", "Indicator", "TradeBot" }, new[]{ "Config" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig), global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig), global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Property : pb::IMessage<Property> {
    private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Property> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property(Property other) : this() {
      propertyId_ = other.propertyId_;
      switch (other.PropertyCase) {
        case PropertyOneofCase.Parameter:
          Parameter = other.Parameter.Clone();
          break;
        case PropertyOneofCase.Input:
          Input = other.Input.Clone();
          break;
        case PropertyOneofCase.Output:
          Output = other.Output.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property Clone() {
      return new Property(this);
    }

    /// <summary>Field number for the "property_id" field.</summary>
    public const int PropertyIdFieldNumber = 1;
    private string propertyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter Parameter {
      get { return propertyCase_ == PropertyOneofCase.Parameter ? (global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Parameter;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.Input Input {
      get { return propertyCase_ == PropertyOneofCase.Input ? (global::TickTrader.Algo.Protocol.Grpc.Lib.Input) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Input;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.Output Output {
      get { return propertyCase_ == PropertyOneofCase.Output ? (global::TickTrader.Algo.Protocol.Grpc.Lib.Output) property_ : null; }
      set {
        property_ = value;
        propertyCase_ = value == null ? PropertyOneofCase.None : PropertyOneofCase.Output;
      }
    }

    private object property_;
    /// <summary>Enum of possible cases for the "property" oneof.</summary>
    public enum PropertyOneofCase {
      None = 0,
      Parameter = 10,
      Input = 11,
      Output = 12,
    }
    private PropertyOneofCase propertyCase_ = PropertyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyOneofCase PropertyCase {
      get { return propertyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProperty() {
      propertyCase_ = PropertyOneofCase.None;
      property_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Property);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Property other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyId != other.PropertyId) return false;
      if (!object.Equals(Parameter, other.Parameter)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Output, other.Output)) return false;
      if (PropertyCase != other.PropertyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyId.Length != 0) hash ^= PropertyId.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Parameter) hash ^= Parameter.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Input) hash ^= Input.GetHashCode();
      if (propertyCase_ == PropertyOneofCase.Output) hash ^= Output.GetHashCode();
      hash ^= (int) propertyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PropertyId);
      }
      if (propertyCase_ == PropertyOneofCase.Parameter) {
        output.WriteRawTag(82);
        output.WriteMessage(Parameter);
      }
      if (propertyCase_ == PropertyOneofCase.Input) {
        output.WriteRawTag(90);
        output.WriteMessage(Input);
      }
      if (propertyCase_ == PropertyOneofCase.Output) {
        output.WriteRawTag(98);
        output.WriteMessage(Output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyId);
      }
      if (propertyCase_ == PropertyOneofCase.Parameter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
      }
      if (propertyCase_ == PropertyOneofCase.Input) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (propertyCase_ == PropertyOneofCase.Output) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Property other) {
      if (other == null) {
        return;
      }
      if (other.PropertyId.Length != 0) {
        PropertyId = other.PropertyId;
      }
      switch (other.PropertyCase) {
        case PropertyOneofCase.Parameter:
          if (Parameter == null) {
            Parameter = new global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter();
          }
          Parameter.MergeFrom(other.Parameter);
          break;
        case PropertyOneofCase.Input:
          if (Input == null) {
            Input = new global::TickTrader.Algo.Protocol.Grpc.Lib.Input();
          }
          Input.MergeFrom(other.Input);
          break;
        case PropertyOneofCase.Output:
          if (Output == null) {
            Output = new global::TickTrader.Algo.Protocol.Grpc.Lib.Output();
          }
          Output.MergeFrom(other.Output);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PropertyId = input.ReadString();
            break;
          }
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.Parameter();
            if (propertyCase_ == PropertyOneofCase.Parameter) {
              subBuilder.MergeFrom(Parameter);
            }
            input.ReadMessage(subBuilder);
            Parameter = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.Input subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.Input();
            if (propertyCase_ == PropertyOneofCase.Input) {
              subBuilder.MergeFrom(Input);
            }
            input.ReadMessage(subBuilder);
            Input = subBuilder;
            break;
          }
          case 98: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.Output subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.Output();
            if (propertyCase_ == PropertyOneofCase.Output) {
              subBuilder.MergeFrom(Output);
            }
            input.ReadMessage(subBuilder);
            Output = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      switch (other.ParameterCase) {
        case ParameterOneofCase.Bool:
          Bool = other.Bool.Clone();
          break;
        case ParameterOneofCase.Int:
          Int = other.Int.Clone();
          break;
        case ParameterOneofCase.NullInt:
          NullInt = other.NullInt.Clone();
          break;
        case ParameterOneofCase.Double:
          Double = other.Double.Clone();
          break;
        case ParameterOneofCase.NullDouble:
          NullDouble = other.NullDouble.Clone();
          break;
        case ParameterOneofCase.String:
          String = other.String.Clone();
          break;
        case ParameterOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
        case ParameterOneofCase.File:
          File = other.File.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter Bool {
      get { return parameterCase_ == ParameterOneofCase.Bool ? (global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter Int {
      get { return parameterCase_ == ParameterOneofCase.Int ? (global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.Int;
      }
    }

    /// <summary>Field number for the "null_int" field.</summary>
    public const int NullIntFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter NullInt {
      get { return parameterCase_ == ParameterOneofCase.NullInt ? (global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.NullInt;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter Double {
      get { return parameterCase_ == ParameterOneofCase.Double ? (global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.Double;
      }
    }

    /// <summary>Field number for the "null_double" field.</summary>
    public const int NullDoubleFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter NullDouble {
      get { return parameterCase_ == ParameterOneofCase.NullDouble ? (global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.NullDouble;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter String {
      get { return parameterCase_ == ParameterOneofCase.String ? (global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.String;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter Enum {
      get { return parameterCase_ == ParameterOneofCase.Enum ? (global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter File {
      get { return parameterCase_ == ParameterOneofCase.File ? (global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter) parameter_ : null; }
      set {
        parameter_ = value;
        parameterCase_ = value == null ? ParameterOneofCase.None : ParameterOneofCase.File;
      }
    }

    private object parameter_;
    /// <summary>Enum of possible cases for the "parameter" oneof.</summary>
    public enum ParameterOneofCase {
      None = 0,
      Bool = 10,
      Int = 11,
      NullInt = 12,
      Double = 13,
      NullDouble = 14,
      String = 15,
      Enum = 16,
      File = 17,
    }
    private ParameterOneofCase parameterCase_ = ParameterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterOneofCase ParameterCase {
      get { return parameterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParameter() {
      parameterCase_ = ParameterOneofCase.None;
      parameter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bool, other.Bool)) return false;
      if (!object.Equals(Int, other.Int)) return false;
      if (!object.Equals(NullInt, other.NullInt)) return false;
      if (!object.Equals(Double, other.Double)) return false;
      if (!object.Equals(NullDouble, other.NullDouble)) return false;
      if (!object.Equals(String, other.String)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(File, other.File)) return false;
      if (ParameterCase != other.ParameterCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parameterCase_ == ParameterOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.Int) hash ^= Int.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.NullInt) hash ^= NullInt.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.Double) hash ^= Double.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.NullDouble) hash ^= NullDouble.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.String) hash ^= String.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (parameterCase_ == ParameterOneofCase.File) hash ^= File.GetHashCode();
      hash ^= (int) parameterCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parameterCase_ == ParameterOneofCase.Bool) {
        output.WriteRawTag(82);
        output.WriteMessage(Bool);
      }
      if (parameterCase_ == ParameterOneofCase.Int) {
        output.WriteRawTag(90);
        output.WriteMessage(Int);
      }
      if (parameterCase_ == ParameterOneofCase.NullInt) {
        output.WriteRawTag(98);
        output.WriteMessage(NullInt);
      }
      if (parameterCase_ == ParameterOneofCase.Double) {
        output.WriteRawTag(106);
        output.WriteMessage(Double);
      }
      if (parameterCase_ == ParameterOneofCase.NullDouble) {
        output.WriteRawTag(114);
        output.WriteMessage(NullDouble);
      }
      if (parameterCase_ == ParameterOneofCase.String) {
        output.WriteRawTag(122);
        output.WriteMessage(String);
      }
      if (parameterCase_ == ParameterOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (parameterCase_ == ParameterOneofCase.File) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(File);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parameterCase_ == ParameterOneofCase.Bool) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bool);
      }
      if (parameterCase_ == ParameterOneofCase.Int) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int);
      }
      if (parameterCase_ == ParameterOneofCase.NullInt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullInt);
      }
      if (parameterCase_ == ParameterOneofCase.Double) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Double);
      }
      if (parameterCase_ == ParameterOneofCase.NullDouble) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullDouble);
      }
      if (parameterCase_ == ParameterOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(String);
      }
      if (parameterCase_ == ParameterOneofCase.Enum) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (parameterCase_ == ParameterOneofCase.File) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      switch (other.ParameterCase) {
        case ParameterOneofCase.Bool:
          if (Bool == null) {
            Bool = new global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter();
          }
          Bool.MergeFrom(other.Bool);
          break;
        case ParameterOneofCase.Int:
          if (Int == null) {
            Int = new global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter();
          }
          Int.MergeFrom(other.Int);
          break;
        case ParameterOneofCase.NullInt:
          if (NullInt == null) {
            NullInt = new global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter();
          }
          NullInt.MergeFrom(other.NullInt);
          break;
        case ParameterOneofCase.Double:
          if (Double == null) {
            Double = new global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter();
          }
          Double.MergeFrom(other.Double);
          break;
        case ParameterOneofCase.NullDouble:
          if (NullDouble == null) {
            NullDouble = new global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter();
          }
          NullDouble.MergeFrom(other.NullDouble);
          break;
        case ParameterOneofCase.String:
          if (String == null) {
            String = new global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter();
          }
          String.MergeFrom(other.String);
          break;
        case ParameterOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter();
          }
          Enum.MergeFrom(other.Enum);
          break;
        case ParameterOneofCase.File:
          if (File == null) {
            File = new global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter();
          }
          File.MergeFrom(other.File);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.BoolParameter();
            if (parameterCase_ == ParameterOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.IntParameter();
            if (parameterCase_ == ParameterOneofCase.Int) {
              subBuilder.MergeFrom(Int);
            }
            input.ReadMessage(subBuilder);
            Int = subBuilder;
            break;
          }
          case 98: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.NullableIntParameter();
            if (parameterCase_ == ParameterOneofCase.NullInt) {
              subBuilder.MergeFrom(NullInt);
            }
            input.ReadMessage(subBuilder);
            NullInt = subBuilder;
            break;
          }
          case 106: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.DoubleParameter();
            if (parameterCase_ == ParameterOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 114: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.NullableDoubleParameter();
            if (parameterCase_ == ParameterOneofCase.NullDouble) {
              subBuilder.MergeFrom(NullDouble);
            }
            input.ReadMessage(subBuilder);
            NullDouble = subBuilder;
            break;
          }
          case 122: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.StringParameter();
            if (parameterCase_ == ParameterOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 130: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.EnumParameter();
            if (parameterCase_ == ParameterOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 138: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.FileParameter();
            if (parameterCase_ == ParameterOneofCase.File) {
              subBuilder.MergeFrom(File);
            }
            input.ReadMessage(subBuilder);
            File = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoolParameter : pb::IMessage<BoolParameter> {
    private static readonly pb::MessageParser<BoolParameter> _parser = new pb::MessageParser<BoolParameter>(() => new BoolParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolParameter(BoolParameter other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolParameter Clone() {
      return new BoolParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolParameter other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntParameter : pb::IMessage<IntParameter> {
    private static readonly pb::MessageParser<IntParameter> _parser = new pb::MessageParser<IntParameter>(() => new IntParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParameter(IntParameter other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParameter Clone() {
      return new IntParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntParameter other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NullableIntParameter : pb::IMessage<NullableIntParameter> {
    private static readonly pb::MessageParser<NullableIntParameter> _parser = new pb::MessageParser<NullableIntParameter>(() => new NullableIntParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NullableIntParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableIntParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableIntParameter(NullableIntParameter other) : this() {
      Value = other.value_ != null ? other.Value.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableIntParameter Clone() {
      return new NullableIntParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Int32Value value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Int32Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NullableIntParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NullableIntParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NullableIntParameter other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Int32Value();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Int32Value();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DoubleParameter : pb::IMessage<DoubleParameter> {
    private static readonly pb::MessageParser<DoubleParameter> _parser = new pb::MessageParser<DoubleParameter>(() => new DoubleParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleParameter(DoubleParameter other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleParameter Clone() {
      return new DoubleParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleParameter other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NullableDoubleParameter : pb::IMessage<NullableDoubleParameter> {
    private static readonly pb::MessageParser<NullableDoubleParameter> _parser = new pb::MessageParser<NullableDoubleParameter>(() => new NullableDoubleParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NullableDoubleParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableDoubleParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableDoubleParameter(NullableDoubleParameter other) : this() {
      Value = other.value_ != null ? other.Value.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullableDoubleParameter Clone() {
      return new NullableDoubleParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.DoubleValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.DoubleValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NullableDoubleParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NullableDoubleParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NullableDoubleParameter other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.DoubleValue();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.DoubleValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringParameter : pb::IMessage<StringParameter> {
    private static readonly pb::MessageParser<StringParameter> _parser = new pb::MessageParser<StringParameter>(() => new StringParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParameter(StringParameter other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParameter Clone() {
      return new StringParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringParameter other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnumParameter : pb::IMessage<EnumParameter> {
    private static readonly pb::MessageParser<EnumParameter> _parser = new pb::MessageParser<EnumParameter>(() => new EnumParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnumParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumParameter(EnumParameter other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumParameter Clone() {
      return new EnumParameter(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnumParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnumParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnumParameter other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FileParameter : pb::IMessage<FileParameter> {
    private static readonly pb::MessageParser<FileParameter> _parser = new pb::MessageParser<FileParameter>(() => new FileParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileParameter(FileParameter other) : this() {
      fileName_ = other.fileName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileParameter Clone() {
      return new FileParameter(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileParameter other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolConfig : pb::IMessage<SymbolConfig> {
    private static readonly pb::MessageParser<SymbolConfig> _parser = new pb::MessageParser<SymbolConfig>(() => new SymbolConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConfig(SymbolConfig other) : this() {
      name_ = other.name_;
      origin_ = other.origin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolConfig Clone() {
      return new SymbolConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig.Types.SymbolOrigin origin_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig.Types.SymbolOrigin Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Origin != other.Origin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Origin != 0) hash ^= Origin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Origin != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Origin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Origin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Origin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Origin != 0) {
        Origin = other.Origin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            origin_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig.Types.SymbolOrigin) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SymbolConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SymbolOrigin {
        [pbr::OriginalName("ONLINE")] Online = 0,
        [pbr::OriginalName("CUSTOM")] Custom = 1,
        [pbr::OriginalName("SPECIAL")] Special = 2,
      }

    }
    #endregion

  }

  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      SelectedSymbol = other.selectedSymbol_ != null ? other.SelectedSymbol.Clone() : null;
      switch (other.InputCase) {
        case InputOneofCase.Quote:
          Quote = other.Quote.Clone();
          break;
        case InputOneofCase.Mapped:
          Mapped = other.Mapped.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "selected_symbol" field.</summary>
    public const int SelectedSymbolFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig selectedSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig SelectedSymbol {
      get { return selectedSymbol_; }
      set {
        selectedSymbol_ = value;
      }
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput Quote {
      get { return inputCase_ == InputOneofCase.Quote ? (global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Quote;
      }
    }

    /// <summary>Field number for the "mapped" field.</summary>
    public const int MappedFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput Mapped {
      get { return inputCase_ == InputOneofCase.Mapped ? (global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Mapped;
      }
    }

    private object input_;
    /// <summary>Enum of possible cases for the "input" oneof.</summary>
    public enum InputOneofCase {
      None = 0,
      Quote = 10,
      Mapped = 11,
    }
    private InputOneofCase inputCase_ = InputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputOneofCase InputCase {
      get { return inputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInput() {
      inputCase_ = InputOneofCase.None;
      input_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelectedSymbol, other.SelectedSymbol)) return false;
      if (!object.Equals(Quote, other.Quote)) return false;
      if (!object.Equals(Mapped, other.Mapped)) return false;
      if (InputCase != other.InputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectedSymbol_ != null) hash ^= SelectedSymbol.GetHashCode();
      if (inputCase_ == InputOneofCase.Quote) hash ^= Quote.GetHashCode();
      if (inputCase_ == InputOneofCase.Mapped) hash ^= Mapped.GetHashCode();
      hash ^= (int) inputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectedSymbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelectedSymbol);
      }
      if (inputCase_ == InputOneofCase.Quote) {
        output.WriteRawTag(82);
        output.WriteMessage(Quote);
      }
      if (inputCase_ == InputOneofCase.Mapped) {
        output.WriteRawTag(90);
        output.WriteMessage(Mapped);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectedSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedSymbol);
      }
      if (inputCase_ == InputOneofCase.Quote) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quote);
      }
      if (inputCase_ == InputOneofCase.Mapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapped);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      if (other.selectedSymbol_ != null) {
        if (selectedSymbol_ == null) {
          selectedSymbol_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig();
        }
        SelectedSymbol.MergeFrom(other.SelectedSymbol);
      }
      switch (other.InputCase) {
        case InputOneofCase.Quote:
          if (Quote == null) {
            Quote = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput();
          }
          Quote.MergeFrom(other.Quote);
          break;
        case InputOneofCase.Mapped:
          if (Mapped == null) {
            Mapped = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput();
          }
          Mapped.MergeFrom(other.Mapped);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selectedSymbol_ == null) {
              selectedSymbol_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig();
            }
            input.ReadMessage(selectedSymbol_);
            break;
          }
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteInput();
            if (inputCase_ == InputOneofCase.Quote) {
              subBuilder.MergeFrom(Quote);
            }
            input.ReadMessage(subBuilder);
            Quote = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappedInput();
            if (inputCase_ == InputOneofCase.Mapped) {
              subBuilder.MergeFrom(Mapped);
            }
            input.ReadMessage(subBuilder);
            Mapped = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuoteInput : pb::IMessage<QuoteInput> {
    private static readonly pb::MessageParser<QuoteInput> _parser = new pb::MessageParser<QuoteInput>(() => new QuoteInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuoteInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput(QuoteInput other) : this() {
      useL2_ = other.useL2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput Clone() {
      return new QuoteInput(this);
    }

    /// <summary>Field number for the "use_l2" field.</summary>
    public const int UseL2FieldNumber = 1;
    private bool useL2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseL2 {
      get { return useL2_; }
      set {
        useL2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuoteInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuoteInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseL2 != other.UseL2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseL2 != false) hash ^= UseL2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseL2 != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseL2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseL2 != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuoteInput other) {
      if (other == null) {
        return;
      }
      if (other.UseL2 != false) {
        UseL2 = other.UseL2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseL2 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MappedInput : pb::IMessage<MappedInput> {
    private static readonly pb::MessageParser<MappedInput> _parser = new pb::MessageParser<MappedInput>(() => new MappedInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MappedInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappedInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappedInput(MappedInput other) : this() {
      SelectedMapping = other.selectedMapping_ != null ? other.SelectedMapping.Clone() : null;
      switch (other.InputCase) {
        case InputOneofCase.BarToBar:
          BarToBar = other.BarToBar.Clone();
          break;
        case InputOneofCase.BarToDouble:
          BarToDouble = other.BarToDouble.Clone();
          break;
        case InputOneofCase.QuoteToBar:
          QuoteToBar = other.QuoteToBar.Clone();
          break;
        case InputOneofCase.QuoteToDouble:
          QuoteToDouble = other.QuoteToDouble.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappedInput Clone() {
      return new MappedInput(this);
    }

    /// <summary>Field number for the "selected_mapping" field.</summary>
    public const int SelectedMappingFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey selectedMapping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey SelectedMapping {
      get { return selectedMapping_; }
      set {
        selectedMapping_ = value;
      }
    }

    /// <summary>Field number for the "bar_to_bar" field.</summary>
    public const int BarToBarFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput BarToBar {
      get { return inputCase_ == InputOneofCase.BarToBar ? (global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.BarToBar;
      }
    }

    /// <summary>Field number for the "bar_to_double" field.</summary>
    public const int BarToDoubleFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput BarToDouble {
      get { return inputCase_ == InputOneofCase.BarToDouble ? (global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.BarToDouble;
      }
    }

    /// <summary>Field number for the "quote_to_bar" field.</summary>
    public const int QuoteToBarFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput QuoteToBar {
      get { return inputCase_ == InputOneofCase.QuoteToBar ? (global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.QuoteToBar;
      }
    }

    /// <summary>Field number for the "quote_to_double" field.</summary>
    public const int QuoteToDoubleFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput QuoteToDouble {
      get { return inputCase_ == InputOneofCase.QuoteToDouble ? (global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput) input_ : null; }
      set {
        input_ = value;
        inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.QuoteToDouble;
      }
    }

    private object input_;
    /// <summary>Enum of possible cases for the "input" oneof.</summary>
    public enum InputOneofCase {
      None = 0,
      BarToBar = 10,
      BarToDouble = 11,
      QuoteToBar = 12,
      QuoteToDouble = 13,
    }
    private InputOneofCase inputCase_ = InputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputOneofCase InputCase {
      get { return inputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInput() {
      inputCase_ = InputOneofCase.None;
      input_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MappedInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MappedInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelectedMapping, other.SelectedMapping)) return false;
      if (!object.Equals(BarToBar, other.BarToBar)) return false;
      if (!object.Equals(BarToDouble, other.BarToDouble)) return false;
      if (!object.Equals(QuoteToBar, other.QuoteToBar)) return false;
      if (!object.Equals(QuoteToDouble, other.QuoteToDouble)) return false;
      if (InputCase != other.InputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectedMapping_ != null) hash ^= SelectedMapping.GetHashCode();
      if (inputCase_ == InputOneofCase.BarToBar) hash ^= BarToBar.GetHashCode();
      if (inputCase_ == InputOneofCase.BarToDouble) hash ^= BarToDouble.GetHashCode();
      if (inputCase_ == InputOneofCase.QuoteToBar) hash ^= QuoteToBar.GetHashCode();
      if (inputCase_ == InputOneofCase.QuoteToDouble) hash ^= QuoteToDouble.GetHashCode();
      hash ^= (int) inputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectedMapping_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelectedMapping);
      }
      if (inputCase_ == InputOneofCase.BarToBar) {
        output.WriteRawTag(82);
        output.WriteMessage(BarToBar);
      }
      if (inputCase_ == InputOneofCase.BarToDouble) {
        output.WriteRawTag(90);
        output.WriteMessage(BarToDouble);
      }
      if (inputCase_ == InputOneofCase.QuoteToBar) {
        output.WriteRawTag(98);
        output.WriteMessage(QuoteToBar);
      }
      if (inputCase_ == InputOneofCase.QuoteToDouble) {
        output.WriteRawTag(106);
        output.WriteMessage(QuoteToDouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectedMapping_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedMapping);
      }
      if (inputCase_ == InputOneofCase.BarToBar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarToBar);
      }
      if (inputCase_ == InputOneofCase.BarToDouble) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarToDouble);
      }
      if (inputCase_ == InputOneofCase.QuoteToBar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuoteToBar);
      }
      if (inputCase_ == InputOneofCase.QuoteToDouble) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuoteToDouble);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MappedInput other) {
      if (other == null) {
        return;
      }
      if (other.selectedMapping_ != null) {
        if (selectedMapping_ == null) {
          selectedMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
        }
        SelectedMapping.MergeFrom(other.SelectedMapping);
      }
      switch (other.InputCase) {
        case InputOneofCase.BarToBar:
          if (BarToBar == null) {
            BarToBar = new global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput();
          }
          BarToBar.MergeFrom(other.BarToBar);
          break;
        case InputOneofCase.BarToDouble:
          if (BarToDouble == null) {
            BarToDouble = new global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput();
          }
          BarToDouble.MergeFrom(other.BarToDouble);
          break;
        case InputOneofCase.QuoteToBar:
          if (QuoteToBar == null) {
            QuoteToBar = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput();
          }
          QuoteToBar.MergeFrom(other.QuoteToBar);
          break;
        case InputOneofCase.QuoteToDouble:
          if (QuoteToDouble == null) {
            QuoteToDouble = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput();
          }
          QuoteToDouble.MergeFrom(other.QuoteToDouble);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selectedMapping_ == null) {
              selectedMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
            }
            input.ReadMessage(selectedMapping_);
            break;
          }
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.BarToBarInput();
            if (inputCase_ == InputOneofCase.BarToBar) {
              subBuilder.MergeFrom(BarToBar);
            }
            input.ReadMessage(subBuilder);
            BarToBar = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.BarToDoubleInput();
            if (inputCase_ == InputOneofCase.BarToDouble) {
              subBuilder.MergeFrom(BarToDouble);
            }
            input.ReadMessage(subBuilder);
            BarToDouble = subBuilder;
            break;
          }
          case 98: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToBarInput();
            if (inputCase_ == InputOneofCase.QuoteToBar) {
              subBuilder.MergeFrom(QuoteToBar);
            }
            input.ReadMessage(subBuilder);
            QuoteToBar = subBuilder;
            break;
          }
          case 106: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.QuoteToDoubleInput();
            if (inputCase_ == InputOneofCase.QuoteToDouble) {
              subBuilder.MergeFrom(QuoteToDouble);
            }
            input.ReadMessage(subBuilder);
            QuoteToDouble = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BarToBarInput : pb::IMessage<BarToBarInput> {
    private static readonly pb::MessageParser<BarToBarInput> _parser = new pb::MessageParser<BarToBarInput>(() => new BarToBarInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarToBarInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToBarInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToBarInput(BarToBarInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToBarInput Clone() {
      return new BarToBarInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarToBarInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarToBarInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarToBarInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BarToDoubleInput : pb::IMessage<BarToDoubleInput> {
    private static readonly pb::MessageParser<BarToDoubleInput> _parser = new pb::MessageParser<BarToDoubleInput>(() => new BarToDoubleInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarToDoubleInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToDoubleInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToDoubleInput(BarToDoubleInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarToDoubleInput Clone() {
      return new BarToDoubleInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarToDoubleInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarToDoubleInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarToDoubleInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QuoteToBarInput : pb::IMessage<QuoteToBarInput> {
    private static readonly pb::MessageParser<QuoteToBarInput> _parser = new pb::MessageParser<QuoteToBarInput>(() => new QuoteToBarInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuoteToBarInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToBarInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToBarInput(QuoteToBarInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToBarInput Clone() {
      return new QuoteToBarInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuoteToBarInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuoteToBarInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuoteToBarInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QuoteToDoubleInput : pb::IMessage<QuoteToDoubleInput> {
    private static readonly pb::MessageParser<QuoteToDoubleInput> _parser = new pb::MessageParser<QuoteToDoubleInput>(() => new QuoteToDoubleInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuoteToDoubleInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToDoubleInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToDoubleInput(QuoteToDoubleInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteToDoubleInput Clone() {
      return new QuoteToDoubleInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuoteToDoubleInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuoteToDoubleInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuoteToDoubleInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class OutputColor : pb::IMessage<OutputColor> {
    private static readonly pb::MessageParser<OutputColor> _parser = new pb::MessageParser<OutputColor>(() => new OutputColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputColor(OutputColor other) : this() {
      alpha_ = other.alpha_;
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputColor Clone() {
      return new OutputColor(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 2;
    private float red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 3;
    private float green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 4;
    private float blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Red, other.Red)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Green, other.Green)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blue, other.Blue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Red != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Red);
      if (Green != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Green);
      if (Blue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (Red != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Red);
      }
      if (Green != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Green);
      }
      if (Blue != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Blue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Red != 0F) {
        size += 1 + 4;
      }
      if (Green != 0F) {
        size += 1 + 4;
      }
      if (Blue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputColor other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Red != 0F) {
        Red = other.Red;
      }
      if (other.Green != 0F) {
        Green = other.Green;
      }
      if (other.Blue != 0F) {
        Blue = other.Blue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
          case 21: {
            Red = input.ReadFloat();
            break;
          }
          case 29: {
            Green = input.ReadFloat();
            break;
          }
          case 37: {
            Blue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Output : pb::IMessage<Output> {
    private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Output> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output(Output other) : this() {
      isEnabled_ = other.isEnabled_;
      LineColor = other.lineColor_ != null ? other.LineColor.Clone() : null;
      lineThickness_ = other.lineThickness_;
      switch (other.OutputCase) {
        case OutputOneofCase.ColoredLine:
          ColoredLine = other.ColoredLine.Clone();
          break;
        case OutputOneofCase.MarkerSeries:
          MarkerSeries = other.MarkerSeries.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output Clone() {
      return new Output(this);
    }

    /// <summary>Field number for the "is_enabled" field.</summary>
    public const int IsEnabledFieldNumber = 1;
    private bool isEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnabled {
      get { return isEnabled_; }
      set {
        isEnabled_ = value;
      }
    }

    /// <summary>Field number for the "line_color" field.</summary>
    public const int LineColorFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor lineColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor LineColor {
      get { return lineColor_; }
      set {
        lineColor_ = value;
      }
    }

    /// <summary>Field number for the "line_thickness" field.</summary>
    public const int LineThicknessFieldNumber = 3;
    private int lineThickness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineThickness {
      get { return lineThickness_; }
      set {
        lineThickness_ = value;
      }
    }

    /// <summary>Field number for the "colored_line" field.</summary>
    public const int ColoredLineFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput ColoredLine {
      get { return outputCase_ == OutputOneofCase.ColoredLine ? (global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput) output_ : null; }
      set {
        output_ = value;
        outputCase_ = value == null ? OutputOneofCase.None : OutputOneofCase.ColoredLine;
      }
    }

    /// <summary>Field number for the "marker_series" field.</summary>
    public const int MarkerSeriesFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput MarkerSeries {
      get { return outputCase_ == OutputOneofCase.MarkerSeries ? (global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput) output_ : null; }
      set {
        output_ = value;
        outputCase_ = value == null ? OutputOneofCase.None : OutputOneofCase.MarkerSeries;
      }
    }

    private object output_;
    /// <summary>Enum of possible cases for the "output" oneof.</summary>
    public enum OutputOneofCase {
      None = 0,
      ColoredLine = 10,
      MarkerSeries = 11,
    }
    private OutputOneofCase outputCase_ = OutputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputOneofCase OutputCase {
      get { return outputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOutput() {
      outputCase_ = OutputOneofCase.None;
      output_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Output);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Output other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEnabled != other.IsEnabled) return false;
      if (!object.Equals(LineColor, other.LineColor)) return false;
      if (LineThickness != other.LineThickness) return false;
      if (!object.Equals(ColoredLine, other.ColoredLine)) return false;
      if (!object.Equals(MarkerSeries, other.MarkerSeries)) return false;
      if (OutputCase != other.OutputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEnabled != false) hash ^= IsEnabled.GetHashCode();
      if (lineColor_ != null) hash ^= LineColor.GetHashCode();
      if (LineThickness != 0) hash ^= LineThickness.GetHashCode();
      if (outputCase_ == OutputOneofCase.ColoredLine) hash ^= ColoredLine.GetHashCode();
      if (outputCase_ == OutputOneofCase.MarkerSeries) hash ^= MarkerSeries.GetHashCode();
      hash ^= (int) outputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnabled);
      }
      if (lineColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LineColor);
      }
      if (LineThickness != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineThickness);
      }
      if (outputCase_ == OutputOneofCase.ColoredLine) {
        output.WriteRawTag(82);
        output.WriteMessage(ColoredLine);
      }
      if (outputCase_ == OutputOneofCase.MarkerSeries) {
        output.WriteRawTag(90);
        output.WriteMessage(MarkerSeries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEnabled != false) {
        size += 1 + 1;
      }
      if (lineColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineColor);
      }
      if (LineThickness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineThickness);
      }
      if (outputCase_ == OutputOneofCase.ColoredLine) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColoredLine);
      }
      if (outputCase_ == OutputOneofCase.MarkerSeries) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarkerSeries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Output other) {
      if (other == null) {
        return;
      }
      if (other.IsEnabled != false) {
        IsEnabled = other.IsEnabled;
      }
      if (other.lineColor_ != null) {
        if (lineColor_ == null) {
          lineColor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor();
        }
        LineColor.MergeFrom(other.LineColor);
      }
      if (other.LineThickness != 0) {
        LineThickness = other.LineThickness;
      }
      switch (other.OutputCase) {
        case OutputOneofCase.ColoredLine:
          if (ColoredLine == null) {
            ColoredLine = new global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput();
          }
          ColoredLine.MergeFrom(other.ColoredLine);
          break;
        case OutputOneofCase.MarkerSeries:
          if (MarkerSeries == null) {
            MarkerSeries = new global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput();
          }
          MarkerSeries.MergeFrom(other.MarkerSeries);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsEnabled = input.ReadBool();
            break;
          }
          case 18: {
            if (lineColor_ == null) {
              lineColor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.OutputColor();
            }
            input.ReadMessage(lineColor_);
            break;
          }
          case 24: {
            LineThickness = input.ReadInt32();
            break;
          }
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.ColoredLineOutput();
            if (outputCase_ == OutputOneofCase.ColoredLine) {
              subBuilder.MergeFrom(ColoredLine);
            }
            input.ReadMessage(subBuilder);
            ColoredLine = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.MarkerSeriesOutput();
            if (outputCase_ == OutputOneofCase.MarkerSeries) {
              subBuilder.MergeFrom(MarkerSeries);
            }
            input.ReadMessage(subBuilder);
            MarkerSeries = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColoredLineOutput : pb::IMessage<ColoredLineOutput> {
    private static readonly pb::MessageParser<ColoredLineOutput> _parser = new pb::MessageParser<ColoredLineOutput>(() => new ColoredLineOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColoredLineOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColoredLineOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColoredLineOutput(ColoredLineOutput other) : this() {
      lineStyle_ = other.lineStyle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColoredLineOutput Clone() {
      return new ColoredLineOutput(this);
    }

    /// <summary>Field number for the "line_style" field.</summary>
    public const int LineStyleFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle lineStyle_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle LineStyle {
      get { return lineStyle_; }
      set {
        lineStyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColoredLineOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColoredLineOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineStyle != other.LineStyle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineStyle != 0) hash ^= LineStyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LineStyle != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LineStyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineStyle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColoredLineOutput other) {
      if (other == null) {
        return;
      }
      if (other.LineStyle != 0) {
        LineStyle = other.LineStyle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            lineStyle_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkerSeriesOutput : pb::IMessage<MarkerSeriesOutput> {
    private static readonly pb::MessageParser<MarkerSeriesOutput> _parser = new pb::MessageParser<MarkerSeriesOutput>(() => new MarkerSeriesOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerSeriesOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerSeriesOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerSeriesOutput(MarkerSeriesOutput other) : this() {
      markerSize_ = other.markerSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerSeriesOutput Clone() {
      return new MarkerSeriesOutput(this);
    }

    /// <summary>Field number for the "marker_size" field.</summary>
    public const int MarkerSizeFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize markerSize_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize MarkerSize {
      get { return markerSize_; }
      set {
        markerSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerSeriesOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerSeriesOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarkerSize != other.MarkerSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarkerSize != 0) hash ^= MarkerSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarkerSize != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MarkerSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarkerSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkerSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerSeriesOutput other) {
      if (other == null) {
        return;
      }
      if (other.MarkerSize != 0) {
        MarkerSize = other.MarkerSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            markerSize_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PluginPermissions : pb::IMessage<PluginPermissions> {
    private static readonly pb::MessageParser<PluginPermissions> _parser = new pb::MessageParser<PluginPermissions>(() => new PluginPermissions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginPermissions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginPermissions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginPermissions(PluginPermissions other) : this() {
      tradeAllowed_ = other.tradeAllowed_;
      isolated_ = other.isolated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginPermissions Clone() {
      return new PluginPermissions(this);
    }

    /// <summary>Field number for the "trade_allowed" field.</summary>
    public const int TradeAllowedFieldNumber = 1;
    private bool tradeAllowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TradeAllowed {
      get { return tradeAllowed_; }
      set {
        tradeAllowed_ = value;
      }
    }

    /// <summary>Field number for the "isolated" field.</summary>
    public const int IsolatedFieldNumber = 2;
    private bool isolated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isolated {
      get { return isolated_; }
      set {
        isolated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginPermissions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginPermissions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeAllowed != other.TradeAllowed) return false;
      if (Isolated != other.Isolated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeAllowed != false) hash ^= TradeAllowed.GetHashCode();
      if (Isolated != false) hash ^= Isolated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeAllowed != false) {
        output.WriteRawTag(8);
        output.WriteBool(TradeAllowed);
      }
      if (Isolated != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isolated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeAllowed != false) {
        size += 1 + 1;
      }
      if (Isolated != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginPermissions other) {
      if (other == null) {
        return;
      }
      if (other.TradeAllowed != false) {
        TradeAllowed = other.TradeAllowed;
      }
      if (other.Isolated != false) {
        Isolated = other.Isolated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TradeAllowed = input.ReadBool();
            break;
          }
          case 16: {
            Isolated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PluginConfig : pb::IMessage<PluginConfig> {
    private static readonly pb::MessageParser<PluginConfig> _parser = new pb::MessageParser<PluginConfig>(() => new PluginConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginConfig(PluginConfig other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      timeFrame_ = other.timeFrame_;
      MainSymbol = other.mainSymbol_ != null ? other.MainSymbol.Clone() : null;
      SelectedMapping = other.selectedMapping_ != null ? other.SelectedMapping.Clone() : null;
      instanceId_ = other.instanceId_;
      Permissions = other.permissions_ != null ? other.Permissions.Clone() : null;
      properties_ = other.properties_.Clone();
      switch (other.ConfigCase) {
        case ConfigOneofCase.Indicator:
          Indicator = other.Indicator.Clone();
          break;
        case ConfigOneofCase.TradeBot:
          TradeBot = other.TradeBot.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginConfig Clone() {
      return new PluginConfig(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "time_frame" field.</summary>
    public const int TimeFrameFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame timeFrame_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame TimeFrame {
      get { return timeFrame_; }
      set {
        timeFrame_ = value;
      }
    }

    /// <summary>Field number for the "main_symbol" field.</summary>
    public const int MainSymbolFieldNumber = 3;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig mainSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig MainSymbol {
      get { return mainSymbol_; }
      set {
        mainSymbol_ = value;
      }
    }

    /// <summary>Field number for the "selected_mapping" field.</summary>
    public const int SelectedMappingFieldNumber = 4;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey selectedMapping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey SelectedMapping {
      get { return selectedMapping_; }
      set {
        selectedMapping_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 5;
    private string instanceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 6;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions permissions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions Permissions {
      get { return permissions_; }
      set {
        permissions_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.Property> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(58, global::TickTrader.Algo.Protocol.Grpc.Lib.Property.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.Property> properties_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.Property>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.Property> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "indicator" field.</summary>
    public const int IndicatorFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig Indicator {
      get { return configCase_ == ConfigOneofCase.Indicator ? (global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.Indicator;
      }
    }

    /// <summary>Field number for the "trade_bot" field.</summary>
    public const int TradeBotFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig TradeBot {
      get { return configCase_ == ConfigOneofCase.TradeBot ? (global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig) config_ : null; }
      set {
        config_ = value;
        configCase_ = value == null ? ConfigOneofCase.None : ConfigOneofCase.TradeBot;
      }
    }

    private object config_;
    /// <summary>Enum of possible cases for the "config" oneof.</summary>
    public enum ConfigOneofCase {
      None = 0,
      Indicator = 10,
      TradeBot = 11,
    }
    private ConfigOneofCase configCase_ = ConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigOneofCase ConfigCase {
      get { return configCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfig() {
      configCase_ = ConfigOneofCase.None;
      config_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (TimeFrame != other.TimeFrame) return false;
      if (!object.Equals(MainSymbol, other.MainSymbol)) return false;
      if (!object.Equals(SelectedMapping, other.SelectedMapping)) return false;
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Permissions, other.Permissions)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (!object.Equals(Indicator, other.Indicator)) return false;
      if (!object.Equals(TradeBot, other.TradeBot)) return false;
      if (ConfigCase != other.ConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (TimeFrame != 0) hash ^= TimeFrame.GetHashCode();
      if (mainSymbol_ != null) hash ^= MainSymbol.GetHashCode();
      if (selectedMapping_ != null) hash ^= SelectedMapping.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (permissions_ != null) hash ^= Permissions.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (configCase_ == ConfigOneofCase.Indicator) hash ^= Indicator.GetHashCode();
      if (configCase_ == ConfigOneofCase.TradeBot) hash ^= TradeBot.GetHashCode();
      hash ^= (int) configCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (TimeFrame != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TimeFrame);
      }
      if (mainSymbol_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MainSymbol);
      }
      if (selectedMapping_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelectedMapping);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstanceId);
      }
      if (permissions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Permissions);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (configCase_ == ConfigOneofCase.Indicator) {
        output.WriteRawTag(82);
        output.WriteMessage(Indicator);
      }
      if (configCase_ == ConfigOneofCase.TradeBot) {
        output.WriteRawTag(90);
        output.WriteMessage(TradeBot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (TimeFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeFrame);
      }
      if (mainSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainSymbol);
      }
      if (selectedMapping_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedMapping);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (permissions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Permissions);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (configCase_ == ConfigOneofCase.Indicator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Indicator);
      }
      if (configCase_ == ConfigOneofCase.TradeBot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeBot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginConfig other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.TimeFrame != 0) {
        TimeFrame = other.TimeFrame;
      }
      if (other.mainSymbol_ != null) {
        if (mainSymbol_ == null) {
          mainSymbol_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig();
        }
        MainSymbol.MergeFrom(other.MainSymbol);
      }
      if (other.selectedMapping_ != null) {
        if (selectedMapping_ == null) {
          selectedMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
        }
        SelectedMapping.MergeFrom(other.SelectedMapping);
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.permissions_ != null) {
        if (permissions_ == null) {
          permissions_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions();
        }
        Permissions.MergeFrom(other.Permissions);
      }
      properties_.Add(other.properties_);
      switch (other.ConfigCase) {
        case ConfigOneofCase.Indicator:
          if (Indicator == null) {
            Indicator = new global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig();
          }
          Indicator.MergeFrom(other.Indicator);
          break;
        case ConfigOneofCase.TradeBot:
          if (TradeBot == null) {
            TradeBot = new global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig();
          }
          TradeBot.MergeFrom(other.TradeBot);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 16: {
            timeFrame_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame) input.ReadEnum();
            break;
          }
          case 26: {
            if (mainSymbol_ == null) {
              mainSymbol_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolConfig();
            }
            input.ReadMessage(mainSymbol_);
            break;
          }
          case 34: {
            if (selectedMapping_ == null) {
              selectedMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
            }
            input.ReadMessage(selectedMapping_);
            break;
          }
          case 42: {
            InstanceId = input.ReadString();
            break;
          }
          case 50: {
            if (permissions_ == null) {
              permissions_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginPermissions();
            }
            input.ReadMessage(permissions_);
            break;
          }
          case 58: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 82: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.IndicatorConfig();
            if (configCase_ == ConfigOneofCase.Indicator) {
              subBuilder.MergeFrom(Indicator);
            }
            input.ReadMessage(subBuilder);
            Indicator = subBuilder;
            break;
          }
          case 90: {
            global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig subBuilder = new global::TickTrader.Algo.Protocol.Grpc.Lib.TradeBotConfig();
            if (configCase_ == ConfigOneofCase.TradeBot) {
              subBuilder.MergeFrom(TradeBot);
            }
            input.ReadMessage(subBuilder);
            TradeBot = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class IndicatorConfig : pb::IMessage<IndicatorConfig> {
    private static readonly pb::MessageParser<IndicatorConfig> _parser = new pb::MessageParser<IndicatorConfig>(() => new IndicatorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndicatorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndicatorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndicatorConfig(IndicatorConfig other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndicatorConfig Clone() {
      return new IndicatorConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndicatorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndicatorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndicatorConfig other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TradeBotConfig : pb::IMessage<TradeBotConfig> {
    private static readonly pb::MessageParser<TradeBotConfig> _parser = new pb::MessageParser<TradeBotConfig>(() => new TradeBotConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeBotConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeBotConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeBotConfig(TradeBotConfig other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeBotConfig Clone() {
      return new TradeBotConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeBotConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeBotConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeBotConfig other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
