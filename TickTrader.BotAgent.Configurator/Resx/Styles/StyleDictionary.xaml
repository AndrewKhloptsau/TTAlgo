<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TickTrader.BotAgent.Configurator"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <local:ModelErrorCounter x:Key="ErrorCounter"/>

    <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="Separator">
        <Setter Property="Margin" Value="0 10"/>
    </Style>

    <Style x:Key="DescriptionTextBox" TargetType="TextBlock">
        <Setter Property="Margin" Value="40 0 0 0"/>
        <Setter Property="FontSize" Value="14"/>
        <!--<Setter Property="Background" Value="LightGray"/>-->
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style x:Key="DefaultTextBoxStyle" TargetType="TextBox">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="170"/>
        <!--<Setter Property="BorderBrush" Value="Gray"/>-->
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Name="Border"
                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Panel.Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer HorizontalScrollBarVisibility="Hidden"
                               VerticalScrollBarVisibility="Hidden"
                               Name="PART_ContentHost"
                               Focusable="False" />
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="Border.BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter Property="Border.BorderBrush" TargetName="border" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="BorderBrush" Value="Red"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="Validation.HasError" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="BorderBrush" Value="DarkRed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="True"/>
                    <Condition Property="Validation.HasError" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="2"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}"/>

    <Style x:Key="StateButton" TargetType="Button">
        <Setter Property="Margin" Value="20 0"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderBrush" Value="SteelBlue"/>
    </Style>

    <Style x:Key="ContentControlPanel">
        <Setter Property="Control.Width" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DockPanel}}, Path=ActualWidth}"/>
        <Setter Property="Control.Padding" Value="20 0 10 0"/>
        <Setter Property="Control.Margin" Value="0 10 0 5"/>
        <Setter Property="Control.VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="BaseCheckBox" TargetType="CheckBox">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="SecondaryButton" TargetType="Button">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="10 0 0 0"/>
        <Setter Property="Content" Value="Generate"/>
        <Setter Property="IsTabStop" Value="False"/>
        <!--<Setter Property="Padding" Value="3"/>-->
    </Style>

    <Style x:Key="StateServiceIndicator" TargetType="Ellipse">
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Fill" Value="Red"/>
        <Setter Property="Margin" Value="5 0"/>
    </Style>

    <Style x:Key="StateServiceRow">
        <Setter Property="Control.HorizontalAlignment" Value="Right"/>
        <Setter Property="Control.Margin" Value="0 0 20 0"/>
    </Style>

    <Style x:Key="DefaultInfoMessage" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="RestartMessage" TargetType="TextBlock" BasedOn="{StaticResource DefaultInfoMessage}">
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StateServiceModel.VisibleRestartMessage}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InfoMessage" TargetType="TextBlock" BasedOn="{StaticResource DefaultInfoMessage}">
        <Setter Property="FontStyle" Value="Italic"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StateServiceModel.VisibleRestartMessage}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarButton" TargetType="Button">
        <Setter Property="Margin" Value="5 0"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="ToolBarSaveButton" TargetType="Button" BasedOn="{StaticResource ToolBarButton}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RefreshCounter.Update}" Value="True"/>
                    <Condition Binding="{Binding Source={StaticResource ErrorCounter}, Path=TotalErrorCount}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarAgentStartButton" TargetType="Button" BasedOn="{StaticResource ToolBarButton}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="ToolTip" Value="Start Server"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StateServiceModel.ServiceRunning}" Value="True">
                <Setter Property="ToolTip" Value="Restart Server"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Source={StaticResource ErrorCounter}, Path=TotalErrorCount}" Value="0"/>
                    <Condition Binding="{Binding Source={StaticResource ErrorCounter}, Path=TotalWarningCount}" Value="0"/>
                    <Condition Binding="{Binding Spinner.Run}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarStopButton" TargetType="Button" BasedOn="{StaticResource ToolBarButton}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="ToolTip" Value="Stop Server"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StateServiceModel.ServiceRunning}" Value="True">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolBarIcon" TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="20"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Path=IsEnabled}" Value="False">
                <Setter Property="Foreground" Value="LightGray"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StartAndRestartToolBarIcon" TargetType="{x:Type fa:ImageAwesome}" BasedOn="{StaticResource ToolBarIcon}">
        <Setter Property="Icon" Value="Play"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding StateServiceModel.ServiceRunning}" Value="True">
                <Setter Property="Icon" Value="Refresh"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OpenLogsFolderButton" TargetType="Button">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="Width" Value="23"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 5 5 0"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="LogsHeader" TargetType="TextBlock">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="LogsBorderPanel" TargetType="Border">
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="BorderBrush" Value="SteelBlue"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="LogsPanel" TargetType="TextBox">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="BorderBrush" Value="SteelBlue"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="Width" Value="23"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="0 0 10 0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" CornerRadius="3 0 0 3" Background="#FFEEF5FD">
                            <ContentPresenter VerticalAlignment="Center"
                              HorizontalAlignment="Left"
                              ContentSource="Header"
                              Margin="5 2">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightBlue" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="False"/>
                                <Condition Binding="{Binding ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                <Condition Binding="{Binding ErrorCounter.HasModelWarningCount, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="Yellow"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                                <Condition Binding="{Binding ErrorCounter.HasModelWarningCount, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="Orange"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="TabName" TargetType="TextBlock">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalAlignment" Value="Center"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TabIcon" TargetType="fa:ImageAwesome">
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Width" Value="23"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="0 0 10 0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="MainTabControl" TargetType="TabControl">
        <Setter Property="TabStripPlacement" Value="Left"/>
        <Setter Property="SelectedIndex" Value="0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=startAgentSpinner, Path=Visibility}" Value="Visible">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TabWarningStyle" TargetType="TabItem">
        <Setter Property="Background" Value="Yellow"/>
    </Style>

    <Style x:Key="UserTabItemErrorStyle" TargetType="TextBlock" BasedOn="{StaticResource TabName}">
        <Setter Property="Foreground" Value="Red"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdminModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                    <Condition Binding="{Binding DealerModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                    <Condition Binding="{Binding ViewerModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Black"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="UserTabIconErrorStyle" TargetType="fa:ImageAwesome" BasedOn="{StaticResource TabIcon}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdminModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                    <Condition Binding="{Binding DealerModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                    <Condition Binding="{Binding ViewerModel.ErrorCounter.HasModelErrorCount, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Black"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AgentSpinner" TargetType="fa:ImageAwesome">
        <Setter Property="Icon" Value="Cog"/>
        <Setter Property="SpinDuration" Value="4"/>
        <Setter Property="Spin" Value="True"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
</ResourceDictionary>