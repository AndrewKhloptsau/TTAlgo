<Window x:Class="TickTrader.BotTerminal.PluginSetupView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:l="clr-namespace:TickTrader.BotTerminal"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:am="clr-namespace:TickTrader.Algo.GuiModel;assembly=TickTrader.Algo.GuiModel"
        Title="IndicatorSetupView"
        Height="300" Width="340"
        Style="{StaticResource Dialog_Style}"
        ResizeMode="NoResize">

    <Window.Resources>

        <Style TargetType="l:FlatButton" BasedOn="{StaticResource FlatButtonMainStyle}">
            <Setter Property="MinWidth" Value="75" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Margin" Value="5,7" />
            <Setter Property="Background" Value="{DynamicResource Dialog_ButtonBackground}" />
            <Setter Property="HighlightBackground" Value="{DynamicResource Dialog_ButtonHighlightBackground}" />
        </Style>

        <Style x:Key="ParamUtilityButtonStyle" TargetType="l:FlatButton" BasedOn="{StaticResource FlatButtonMainStyle}">
            <Setter Property="Margin" Value="0"/>
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="{DynamicResource Dialog_ButtonBackground}"/>
            <Setter Property="HighlightBackground" Value="{DynamicResource Dialog_ButtonHighlightBackground}"/>
            <Setter Property="Margin" Value="3,0,0,0"/>
        </Style>

        <Style x:Key="ControlImitationBorder" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource Dialog_ControlBackground}"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Height" Value="22"/>
            <Style.Triggers>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource Dialog_ControlFocusBorder}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Label">
            <Setter Property="Foreground" Value="{DynamicResource Shell_PrimaryForeground}"/>
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Padding" Value="2,0,2,0"/>
        </Style>

        <Style TargetType="ComboBox" BasedOn="{StaticResource ComboBoxMainStyle}">
            <Setter Property="Height" Value="22"/>
            <Setter Property="Margin" Value="2,0,2,0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        </Style>

        <Style TargetType="CheckBox">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="0"/>
        </Style>

        <Style x:Key="LineSampleStyle" TargetType="Line">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Stretch" Value="Fill"/>
            <Setter Property="X2" Value="1"/>
            <Setter Property="Stroke" Value="{DynamicResource Shell_PrimaryForeground}"/>
            <Setter Property="Margin" Value="5 0 0 0"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Width" Value="100"/>
        </Style>

        <DataTemplate x:Key="LineStyleItem">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <TextBlock Text="" Grid.Column="0" />
                <Line Grid.Column="1" 
                      Style="{StaticResource LineSampleStyle}"
                      StrokeDashArray="{Binding Converter={l:LineStyleToDashArrayConverter}}"
                      StrokeThickness="1" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="LineThicknessItem">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding}" Grid.Column="0" />
                <Line Grid.Column="1" Style="{StaticResource LineSampleStyle}" StrokeThickness="{Binding}"/>
            </Grid>
        </DataTemplate>

        <!-- Double Output Template  -->

        <DataTemplate DataType="{x:Type am:ColoredLineOutputSetup}">
            <Grid Margin="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="70" />
                    <ColumnDefinition Width="70" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Label Grid.Column="0" Content="{Binding DisplayName}"/>
                <CheckBox Grid.Column="1" IsChecked="{Binding IsEnabled}" IsEnabled="{Binding IsValid}" Margin="5,0,5,0"/>
                <ComboBox Grid.Column="2" IsEditable="False" IsEnabled="{Binding IsEnabled}"
                          SelectedItem="{Binding LineThickness}" ItemsSource="{Binding AvailableThicknesses}"
                          ItemTemplate="{StaticResource LineThicknessItem}"/>
                <ComboBox Grid.Column="3" IsEditable="False" IsEnabled="{Binding IsEnabled}" 
                          SelectedItem="{Binding LineStyle}"  ItemsSource="{Binding AvailableLineStyles}"
                          ItemTemplate="{StaticResource LineStyleItem}"/>

                <l:PopupButton  Grid.Column="4" Background="Transparent">
                    <l:PopupButton.Content>
                        <Rectangle Width="15" Height="15"
                           Fill="{Binding LineColor, Converter={StaticResource ColorToBrushConverter}}"
                           Stroke="{DynamicResource Dialog_ControlBackground}"
                           Margin="5,0,5,0" StrokeThickness="1" />
                    </l:PopupButton.Content>
                    <l:PopupButton.PopupContent>
                        <l:ColorPicker x:Name="colorPicker" Background="{DynamicResource ShellPanel_BackgroundBrush}" 
                                       InsideBorderBrush="{DynamicResource Menu_BorderBrush}" InsideBorderThickness="1"
                                       SelectedColor="{Binding Path=LineColor, Mode=TwoWay}"></l:ColorPicker>
                    </l:PopupButton.PopupContent>
                </l:PopupButton>
            </Grid>
        </DataTemplate>

        <!-- Marker Output Template  -->

        <DataTemplate DataType="{x:Type am:MarkerSeriesOutputSetup}">
            <Grid Margin="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="70" />
                    <ColumnDefinition Width="70" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Label Grid.Column="0" Content="{Binding DisplayName}"/>
                <CheckBox Grid.Column="1" IsChecked="{Binding IsEnabled}" IsEnabled="{Binding IsValid}" Margin="5,0,5,0"/>
                <ComboBox Grid.Column="2" IsEditable="False" IsEnabled="{Binding IsEnabled}"
                          SelectedItem="{Binding LineThickness}" ItemsSource="{Binding AvailableThicknesses}"
                          ItemTemplate="{StaticResource LineThicknessItem}"/>
                <ComboBox Grid.Column="3" IsEditable="False" IsEnabled="{Binding IsEnabled}" 
                          SelectedItem="{Binding MarkerSize}"  ItemsSource="{Binding AvailableSizes}"/>
                <Rectangle Grid.Column="4" Width="15" Height="15"
                           Fill="{Binding LineColor, Converter={StaticResource ColorToBrushConverter}}"
                           Stroke="{DynamicResource Dialog_ControlBackground}"
                           Margin="5,0,5,0" StrokeThickness="1" />
            </Grid>
        </DataTemplate>

        <!--  Parameter Setup Template  -->

        <DataTemplate x:Key="LabeledPropertySetup">
            <Grid Margin="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Label Content="{Binding DisplayName}"/>
                <ContentControl Content="{Binding}" HorizontalAlignment="Stretch" Grid.Row="1" IsTabStop="False"/>
            </Grid>
        </DataTemplate>

        <!--  AlgoInvalidParameter  -->

        <DataTemplate DataType="{x:Type am:AlgoInvalidParameter}">
            <TextBox Name="input" Text="Invalid parameter" IsEnabled="False"
                                     HorizontalAlignment="Stretch" Background="Red"/>
        </DataTemplate>

        <!--  Int Param template  -->

        <DataTemplate DataType="{x:Type am:IntParamSetup}">
            <TextBox Name="input" Text="{Binding ValueStr, UpdateSourceTrigger=PropertyChanged}"
                                     HorizontalAlignment="Stretch" Margin="0"/>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasError}" Value="True">
                    <Setter TargetName="input" Property="Background" Value="{DynamicResource Dialog_ErrorBackground}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--  DoubleParam template -->

        <DataTemplate DataType="{x:Type am:DoubleParamSetup}">
            <TextBox Name="input" Text="{Binding ValueStr, UpdateSourceTrigger=PropertyChanged}"
                                     HorizontalAlignment="Stretch" Margin="0"/>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasError}" Value="True">
                    <Setter TargetName="input" Property="Background" Value="{DynamicResource Dialog_ErrorBackground}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--  StringParam template  -->

        <DataTemplate DataType="{x:Type am:StringParamSetup}">
            <TextBox Name="input" Text="{Binding ValueStr, UpdateSourceTrigger=PropertyChanged}"
                                     HorizontalAlignment="Stretch"/>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasError}" Value="True">
                    <Setter TargetName="input" Property="Background" Value="{DynamicResource Dialog_ErrorBackground}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--  Enum Param template  -->

        <DataTemplate DataType="{x:Type am:EnumParamSetup}">
            <ComboBox Name="input"
                      ItemsSource="{Binding EnumValues}" SelectedItem="{Binding SelectedValue}"
                      Margin="0">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasError}" Value="True">
                    <Setter TargetName="input" Property="Background" Value="{DynamicResource Dialog_ErrorBackground}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--  File Param template  -->

        <DataTemplate DataType="{x:Type am:FileParamSetup}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Name="input" Style="{StaticResource ControlImitationBorder}">
                    <TextBlock Text="{Binding FileName}" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                               Foreground="{DynamicResource Shell_PrimaryForeground}"
                               Padding="4,0,4,0" TextTrimming="CharacterEllipsis"/>
                </Border>
                <l:FlatButton Grid.Column="1" Content="..." Style="{StaticResource ParamUtilityButtonStyle}" Padding="3,0,3,0">
                    <i:Interaction.Behaviors>
                        <l:OpenFileDialogBehavior FilePath="{Binding FilePath}" Filter="{Binding Filter}"/>
                    </i:Interaction.Behaviors>
                </l:FlatButton>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasError}" Value="True">
                    <Setter TargetName="input" Property="Background" Value="{DynamicResource Dialog_ErrorBackground}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!-- Bar Input Setup Template  -->

        <DataTemplate DataType="{x:Type am:BarToBarInput}">
            <ComboBox Grid.Column="1" IsEditable="False" Margin="0"
                      SelectedValue="{Binding SymbolCode}" ItemsSource="{Binding AvailableSymbols}"
                      IsEnabled="{Binding HasChoice}"/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type am:QuoteToBarInput}">
            <ComboBox Grid.Column="1" IsEditable="False" Margin="0"
                      SelectedValue="{Binding SymbolCode}" ItemsSource="{Binding AvailableSymbols}"
                      IsEnabled="{Binding HasChoice}"/>
        </DataTemplate>

        <!-- Tick Input Setup Template  -->

        <DataTemplate DataType="{x:Type am:QuoteToQuoteInput}">
            <ComboBox Grid.Column="1" IsEditable="False" Margin="0"
                      SelectedValue="{Binding SymbolCode}" ItemsSource="{Binding AvailableSymbols}"
                      IsEnabled="{Binding HasChoice}"/>
        </DataTemplate>

        <!-- Double (bar based) Input Setup Template  -->

        <DataTemplate DataType="{x:Type am:BarToDoubleInput}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="65" />
                </Grid.ColumnDefinitions>

                <ComboBox Grid.Column="0" IsEditable="False" Margin="0"
                          SelectedValue="{Binding SymbolCode}" ItemsSource="{Binding AvailableSymbols}"/>
                <ComboBox Grid.Column="1" IsEditable="False" IsEnabled="True"
                          ItemsSource="{Binding AvailableMappings}"
                          SelectedItem="{Binding Mapping}"
                          Margin="2,0,0,0" />
            </Grid>
        </DataTemplate>

        <!-- Double (tick based) Input Setup Template  -->

        <DataTemplate DataType="{x:Type am:QuoteToDoubleInput}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="65" />
                </Grid.ColumnDefinitions>

                <ComboBox Grid.Column="0" IsEditable="False" Margin="0"
                          SelectedValue="{Binding SymbolCode}" ItemsSource="{Binding AvailableSymbols}"/>
                <ComboBox Grid.Column="1" IsEditable="False" IsEnabled="True"
                          ItemsSource="{Binding AvailableMappings}"
                          SelectedItem="{Binding Mapping}"
                          Margin="2,0,0,0" />
            </Grid>
        </DataTemplate>

        <!--  Data Source  -->

        <CollectionViewSource x:Key="inputsCollection" Source="{Binding Setup.Inputs}"/>
        <CollectionViewSource x:Key="paramsCollection" Source="{Binding Setup.Parameters}"/>
        <CompositeCollection x:Key="inputsAndParamsComposite">
            <CollectionContainer Collection="{Binding Source={StaticResource paramsCollection}}"/>
            <CollectionContainer Collection="{Binding Source={StaticResource inputsCollection}}"/>
        </CompositeCollection>

    </Window.Resources>

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"
                      IsTabStop="False"
                      Style="{StaticResource DialogScrollViewer_Style}">
            <StackPanel>

                <ItemsControl IsTabStop="False" ItemsSource="{StaticResource inputsAndParamsComposite}"
                              ItemTemplate="{StaticResource LabeledPropertySetup}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="2" VerticalAlignment="Top" />
                            <!--<StackPanel Orientation="Vertical" />-->
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>

                <Rectangle HorizontalAlignment="Stretch" Height="1" VerticalAlignment="Center" Margin="10,5,10,5" Fill="{DynamicResource Dialog_ControlBackground}" StrokeThickness="0"/>

                <ItemsControl ItemsSource="{Binding Setup.Outputs}"/>

            </StackPanel>
        </ScrollViewer>

        <Grid Name="ButtonsPanel" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <l:FlatButton x:Name="Ok" Content="Ok" Grid.Column="1"
                          Background="{DynamicResource Dialog_OkButtonBackground}"
                          HighlightBackground="{DynamicResource Dialog_OkButtonHighlightBackground}"/>
            <l:FlatButton x:Name="Cancel" Content="Cancel"
                          Grid.Column="2"/>
            <l:FlatButton x:Name="Reset" Content="Reset"
                          Grid.Column="0"/>
        </Grid>
    </Grid>
</Window>
