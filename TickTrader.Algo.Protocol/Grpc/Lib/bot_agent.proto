syntax = "proto3";

package TickTrader.Algo.Protocol.Grpc.Lib;

// current version 1.0, syncronize with VersionSpec.cs

import "keys.proto";
import "metadata.proto";
import "config.proto";

service BotAgent
{
	rpc Login(LoginRequest) returns (LoginResponse);
	rpc Logout(LogoutRequest) returns (LogoutResponse);

	rpc GetPackageList(PackageListRequest) returns (PackageListResponse);
	rpc GetAccountList(AccountListRequest) returns (AccountListResponse);
	rpc GetBotList(BotListRequest) returns (BotListResponse);
	rpc SubscribeToUpdates(SubscribeToUpdatesRequest) returns (stream UpdateInfo);

	rpc GetApiMetadata(ApiMetadataRequest) returns (ApiMetadataResponse);
	rpc GetMappingsInfo(MappingsInfoRequest) returns (MappingsInfoResponse);
	rpc GetSetupContext(SetupContextRequest) returns (SetupContextResponse);
	rpc GetAccountMetadata(AccountMetadataRequest) returns (AccountMetadataResponse);

	rpc StartBot(StartBotRequest) returns (StartBotResponse);
	rpc StopBot(StopBotRequest) returns (StopBotResponse);
	rpc AddBot(AddBotRequest) returns (AddBotResponse);
	rpc RemoveBot(RemoveBotRequest) returns (RemoveBotResponse);
	rpc ChangeBotConfig(ChangeBotConfigRequest) returns (ChangeBotConfigResponse);

	rpc AddAccount(AddAccountRequest) returns (AddAccountResponse);
	rpc RemoveAccount(RemoveAccountRequest) returns (RemoveAccountResponse);
	rpc ChangeAccount(ChangeAccountRequest) returns (ChangeAccountResponse);
	rpc TestAccount(TestAccountRequest) returns (TestAccountResponse);
	rpc TestAccountCreds(TestAccountCredsRequest) returns (TestAccountCredsResponse);

	rpc UploadPackage(UploadPackageRequest) returns (UploadPackageResponse);
	rpc RemovePackage(RemovePackageRequest) returns (RemovePackageResponse);
	rpc DownloadPackage(DownloadPackageRequest) returns (DownloadPackageResponse);
}

message RequestResult
{
	enum RequestStatus
	{
		SUCCESS = 0;
		INTERNAL_SERVER_ERROR = 1;
		UNAUTHORIZED = 2;
		REJECT = 3;
	}

	RequestStatus status = 1;
	string message = 2;
}

message LoginRequest
{
	string login = 1;
	string password = 2;
	int32 major_version = 3; // client version
	int32 minor_version = 4; // client version
}

message LoginResponse
{
	enum LoginError
	{
		NONE = 0;
		INVALID_CREDENTIALS = 1;
		VERSION_MISMATCH = 2;
	}

	RequestResult exec_result = 1;
	LoginError error = 2;
	int32 major_version = 3; // server version
	int32 minor_version = 4; // server version
	string access_token = 5;
}

message LogoutRequest
{
}

message LogoutResponse
{
	enum LogoutReason
	{
	    CLIENT_REQUEST = 0;
	    SERVER_LOGOUT = 1;
	}

	RequestResult exec_result = 1;
	LogoutReason reason = 2;
	string text = 3;
}

message PackageListRequest
{
}

message PackageListResponse
{
	RequestResult exec_result = 1;
	repeated PackageInfo packages = 2;
}

message AccountListRequest
{
}

message AccountListResponse
{
	RequestResult exec_result = 1;
	repeated AccountModelInfo accounts = 2;
}

message BotListRequest
{
}

message BotListResponse
{
	RequestResult exec_result = 1;
	repeated BotModelInfo bots = 2;
}

message SubscribeToUpdatesRequest
{
}

message UpdateInfo
{
	enum UpdateType
	{
	    ADDED = 0;
	    REPLACED = 1;
	    REMOVED = 2;
	}

	UpdateType type = 1;
	oneof update_info
	{
		PackageUpdateInfo package = 5;
		PackageStateUpdateInfo package_state = 6;
		AccountUpdateInfo account = 7;
		AccountStateUpdateInfo account_state = 8;
		BotUpdateInfo bot = 9;
		BotStateUpdateInfo bot_state = 10;
	}
}

message PackageUpdateInfo
{
	PackageInfo package = 1;
}

message PackageStateUpdateInfo
{
	PackageInfo package = 1;
}

message AccountUpdateInfo
{
	AccountModelInfo account = 1;
}

message AccountStateUpdateInfo
{
	AccountModelInfo account = 1;
}

message BotUpdateInfo
{
	BotModelInfo bot = 1;
}

message BotStateUpdateInfo
{
	BotModelInfo bot = 1;
}

message StartBotRequest
{
	string bot_id = 1;
}

message StartBotResponse
{
	RequestResult exec_result = 1;
}

message StopBotRequest
{
	string bot_id = 1;
}

message StopBotResponse
{
	RequestResult exec_result = 1;
}

message AddBotRequest
{
	AccountKey account = 1;
	PluginConfig config = 2;
}

message AddBotResponse
{
	RequestResult exec_result = 1;
}

message RemoveBotRequest
{
	string bot_id = 1;
	bool clean_log = 2;
	bool clean_algo_data = 3;
}

message RemoveBotResponse
{
	RequestResult exec_result = 1;
}

message ChangeBotConfigRequest
{
	string bot_id = 1;
	PluginConfig new_config = 2;
}

message ChangeBotConfigResponse
{
	RequestResult exec_result = 1;
}

message ApiMetadataRequest
{
}

message ApiMetadataResponse
{
	RequestResult exec_result = 1;
	ApiMetadataInfo api_metadata = 2;
}

message MappingsInfoRequest
{
}

message MappingsInfoResponse
{
	RequestResult exec_result = 1;
	MappingCollectionInfo mappings = 2;
}

message SetupContextRequest
{
}

message SetupContextResponse
{
	RequestResult exec_result = 1;
	SetupContextInfo setup_context = 2;
}

message AccountMetadataRequest
{
	AccountKey account = 1;
}

message AccountMetadataResponse
{
	RequestResult exec_result = 1;
	ConnectionErrorInfo error_info = 2;
	AccountMetadataInfo account_metadata = 3;
}

message AddAccountRequest
{
	AccountKey account = 1;
	string password = 2;
	bool use_new_protocol = 3;
}

message AddAccountResponse
{
	RequestResult exec_result = 1;
}

message RemoveAccountRequest
{
	AccountKey account = 1;
}

message RemoveAccountResponse
{
	RequestResult exec_result = 1;
}

message ChangeAccountRequest
{
	AccountKey account = 1;
	string password = 2;
	bool use_new_protocol = 3;
}

message ChangeAccountResponse
{
	RequestResult exec_result = 1;
}

message TestAccountRequest
{
	AccountKey account = 1;
}

message TestAccountResponse
{
	RequestResult exec_result = 1;
	ConnectionErrorInfo error_info = 2;
}

message TestAccountCredsRequest
{
	AccountKey account = 1;
	string password = 2;
	bool use_new_protocol = 3;
}

message TestAccountCredsResponse
{
	RequestResult exec_result = 1;
	ConnectionErrorInfo error_info = 2;
}

message UploadPackageRequest
{
	string file_name = 1;
	bytes package_binary = 2;
}

message UploadPackageResponse
{
	RequestResult exec_result = 1;
}

message RemovePackageRequest
{
	PackageKey package = 1;
}

message RemovePackageResponse
{
	RequestResult exec_result = 1;
}

message DownloadPackageRequest
{
	PackageKey package = 1;
}

message DownloadPackageResponse
{
	RequestResult exec_result = 1;
	bytes package_binary = 2;
}