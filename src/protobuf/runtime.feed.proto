syntax = "proto3";

package ticktrader.algo.domain;

option csharp_namespace = "TickTrader.Algo.Domain";

import "google/protobuf/wrappers.proto";

message CurrencyInfo {
    string name = 1;
    int32 digits = 2;
    int32 sort_order = 3;
}

message CurrencyListRequest { }

message CurrencyListResponse {
    repeated CurrencyInfo currencies = 1;
}

message CommissonInfo {
    enum ValueType {
        POINTS = 0;
        PERCENTAGE = 1;
        MONEY = 2;
    }

    double commission = 1;
    double limits_commission = 2;
    ValueType value_type = 3;
    double min_commission = 5;
    string min_commission_currency = 6;
}

message MarginInfo {
    enum CalculationMode {
        FOREX = 0;
        CFD = 1;
        FUTURES = 2;
        CFD_INDEX = 3;
        CFD_LEVERAGE = 4;
    }

    CalculationMode mode = 1;
    double factor = 2;
    double hedged = 3;
    google.protobuf.DoubleValue stop_order_reduction = 4;
    google.protobuf.DoubleValue hidden_limit_order_reduction = 5;
}

message SwapInfo {
    enum Type {
        POINTS = 0;
        PERCENT_PER_YEAR = 1;
    }

    bool enabled = 1;
    Type type = 2;
    google.protobuf.DoubleValue size_long = 3;
    google.protobuf.DoubleValue size_short = 4;
    int32 triple_swap_day = 5;
}

message SlippageInfo {
    enum Type {
        PIPS = 0;
        PERCENT = 1;
    }

    google.protobuf.DoubleValue default_value = 1;
    Type type = 2;
}

message SymbolInfo {
    string name = 1;
    bool trade_allowed = 2;
    string base_currency = 3;
    string counter_currency = 4;
    int32 digits = 5;
    double lot_size = 6;
    double min_trade_volume = 7;
    double max_trade_volume = 8;
    double trade_volume_step = 9;
    SlippageInfo slippage = 10;
    CommissonInfo commission = 11;
    MarginInfo margin = 12;
    SwapInfo swap = 13;
    google.protobuf.StringValue description = 14;
    google.protobuf.StringValue security = 16;
    int32 sort_order = 17;
    int32 group_sort_order = 18;
}

message SymbolListRequest { }

message SymbolListResponse {
    repeated SymbolInfo symbols = 1;
}

/*message QuoteEntity {
    string symbol = 1;
    QuoteDataEntity data = 2;
}

message QuoteDataEntity {
    bool is_bid_indicative = 1;
    bool is_ask_indicative = 2;
    repeated QuoteBand bids = 3;
    repeated QuoteBand asks = 4;
}

message QuoteBand {
    double price = 1;
    double amount = 2;
}

message QuotePage {
    repeated QuoteEntity quotes = 1;
}

message QuoteChunk {
    string symbol = 1;
    repeated QuoteDataEntity quotes = 2;
}*/