// Protocol version should be syncronized with VersionSpec.cs
protocol BotAgent(1,0)
{
    message LoginRequest
    {
        ustring Username;
        ustring Password;
    }

    message LoginReport
    {
        int32 CurrentVersion;
    }

    enum LoginRejectReason
    {
        InvalidCredentials,
        VersionMismatch,
        InternalServerError,
    }

    message LoginReject
    {
        LoginRejectReason Reason;
        ustring? Text;
    }

    message LogoutRequest;

    enum LogoutReason
    {
        ClientRequest,
        ServerLogout,
        InternalServerError,
    }

    message LogoutReport
    {
        LogoutReason Reason;
        ustring? Text;
    }

    message Request
    {
        string Id;
    }

    message Report
    {
        string RequestId;
    }

    enum UpdateType
    {
        Added,
        Updated,
        Removed,
    }

    message Update
    {
        string Id;
        UpdateType Type;
    }

    group PluginKey
    {
        ustring PackageName;
        ustring DescriptorId;
    }

    enum PluginType
    {
        Indicator,
        Robot,
        Unknown,
    }

    group PluginDescriptor
    {
        ustring? ApiVersion;
        ustring Id;
        ustring DisplayName;
        ustring UserDisplayName;
        ustring? Category;
        ustring? Version;
        ustring? Description;
        ustring? Copyright;
        PluginType Type;
    }

    group PluginInfo
    {
        PluginKey Key;
        PluginDescriptor Descriptor;
    }

    group PackageModel
    {
        ustring Name;
        timestamp Created;
        PluginInfo[] Plugins;
    }

    group AccountKey
    {
        ustring Login;
        ustring Server;
    }

    group PluginPermissions
    {
        bool TradeAllowed;
    }

    enum BotState
    {
        Offline,
        Starting,
        Faulted,
        Online,
        Stopping,
        Broken,
        Reconnecting,
    }

    group BotModel
    {
        ustring InstanceId;
        bool Isolated;
        BotState State;
        PluginPermissions Permissions;
        AccountKey Account;
        PluginKey Plugin;
    }

    group AccountModel
    {
        ustring Login;
        ustring Server;
    }

    message AccountListRequest : Request;

    message AccountListReport : Report
    {
        AccountModel[] Accounts;
    }

    message BotListRequest : Request;

    message BotListReport : Report
    {
        BotModel[] Bots;
    }

    message PackageListRequest : Request;

    message PackageListReport : Report
    {
        PackageModel[] Packages;
    }

    message SubscribeRequest : Request;

    message SubscribeReport : Report;

    message AccountModelUpdate : Update
    {
        AccountModel Item;
    }

    message BotModelUpdate : Update
    {
        BotModel Item;
    }

    message PackageModelUpdate : Update
    {
        PackageModel Item;
    }

    processor Client()
    {
        send LoginRequest(LoginRequest)
        {
            recv LoginReport(LoginReport)
            {
            }
            or recv LoginReject(LoginReject)
            {
                return;
            }
        }

        send (Request)
        {
            repeat;
        }
        or recv (Report)
        {
            repeat;
        }
        or recv (Update)
        {
            repeat;
        }
        or recv LogoutReport(LogoutReport)
        {
            return;
        }
        or send LogoutRequest(LogoutRequest)
        {
            recv (Report)
            {
                repeat;
            }
            or recv (Update)
            {
                repeat;
            }
            or recv LogoutReport(LogoutReport)
            {
                return;
            }
        }
    }

    processor Server()
    {
        recv LoginRequest(LoginRequest)
        {
            send (LoginReport)
            {
            }
            or send (LoginReject)
            {
                return;
            }
        }

        recv (Request)
        {
            repeat;
        }
        or send (Report)
        {
            repeat;
        }
        or send (Update)
        {
            repeat;
        }
        or send (LogoutReport)
        {
            return;
        }
        or recv LogoutRequest(LogoutRequest)
        {
            send (Report)
            {
                repeat;
            }
            or send (Update)
            {
                repeat;
            }
            or send (LogoutReport)
            {
                return;
            }
        }
    }

    processor ClientUpdate(string) : Client
    (
        Update.Id
    )
    {
        recv AccountModelUpdate(AccountModelUpdate)
        {
        }
        or recv BotModelUpdate(BotModelUpdate)
        {
        }
        or recv PackageModelUpdate(PackageModelUpdate)
        {
        }
    }

    processor ServerUpdate(string) : Server
    (
        Update.Id
    )
    {
        send (AccountModelUpdate)
        {
        }
        or send (BotModelUpdate)
        {
        }
        or send (PackageModelUpdate)
        {
        }
    }

    processor ClientRequest(string) : Client
    (
        Request.Id,
        Report.RequestId
    )
    {
        send AccountListRequest(AccountListRequest)
        {
            recv AccountListReport(AccountListReport)
            {
            }
        }
        or send BotListRequest(BotListRequest)
        {
            recv BotListReport(BotListReport)
            {
            }
        }
        or send PackageListRequest(PackageListRequest)
        {
            recv PackageListReport(PackageListReport)
            {
            }
        }
        or send SubscribeRequest(SubscribeRequest)
        {
            recv SubscribeReport(SubscribeReport)
            {
            }
        }
    }

    processor ServerRequest(string) : Server
    (
        Request.Id,
        Report.RequestId
    )
    {
        recv AccountListRequest(AccountListRequest)
        {
            send (AccountListReport)
            {
            }
        }
        or recv BotListRequest(BotListRequest)
        {
            send (BotListReport)
            {
            }
        }
        or recv PackageListRequest(PackageListRequest)
        {
            send (PackageListReport)
            {
            }
        }
        or recv SubscribeRequest(SubscribeRequest)
        {
            send (SubscribeReport)
            {
            }
        }
    }
}