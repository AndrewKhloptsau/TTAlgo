// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TickTrader.Algo.Protocol.Grpc.Lib {

  /// <summary>Holder for reflection information generated from metadata.proto</summary>
  public static partial class MetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXRhZGF0YS5wcm90bxIhVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdy",
            "cGMuTGliGh1nb29nbGVfcHJvdG9zL3RpbWVzdGFtcC5wcm90bxoKa2V5cy5w",
            "cm90bxoRZGVzY3JpcHRvcnMucHJvdG8aDGNvbmZpZy5wcm90byKQAQoKUGx1",
            "Z2luSW5mbxI5CgNrZXkYASABKAsyLC5UaWNrVHJhZGVyLkFsZ28uUHJvdG9j",
            "b2wuR3JwYy5MaWIuUGx1Z2luS2V5EkcKCmRlc2NyaXB0b3IYAiABKAsyMy5U",
            "aWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuUGx1Z2luRGVzY3Jp",
            "cHRvciK7AQoPUGFja2FnZUlkZW50aXR5EhEKCWZpbGVfbmFtZRgBIAEoCRIR",
            "CglmaWxlX3BhdGgYAiABKAkSLwoLY3JlYXRlZF91dGMYAyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEjUKEWxhc3RfbW9kaWZpZWRfdXRjGAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIMCgRzaXplGAUgASgD",
            "EgwKBGhhc2gYBiABKAkiiQIKC1BhY2thZ2VJbmZvEjoKA2tleRgBIAEoCzIt",
            "LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5QYWNrYWdlS2V5",
            "EkQKCGlkZW50aXR5GAIgASgLMjIuVGlja1RyYWRlci5BbGdvLlByb3RvY29s",
            "LkdycGMuTGliLlBhY2thZ2VJZGVudGl0eRIQCghpc192YWxpZBgDIAEoCBI+",
            "CgdwbHVnaW5zGAQgAygLMi0uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdy",
            "cGMuTGliLlBsdWdpbkluZm8SEQoJaXNfbG9ja2VkGAUgASgIEhMKC2lzX29i",
            "c29sZXRlGAYgASgIIpkBCg1SZWR1Y3Rpb25JbmZvEjwKA2tleRgBIAEoCzIv",
            "LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5SZWR1Y3Rpb25L",
            "ZXkSSgoKZGVzY3JpcHRvchgCIAEoCzI2LlRpY2tUcmFkZXIuQWxnby5Qcm90",
            "b2NvbC5HcnBjLkxpYi5SZWR1Y3Rpb25EZXNjcmlwdG9yIhwKDEN1cnJlbmN5",
            "SW5mbxIMCgRuYW1lGAEgASgJIhoKClN5bWJvbEluZm8SDAoEbmFtZRgBIAEo",
            "CSKRAQoTQWNjb3VudE1ldGFkYXRhSW5mbxI6CgNrZXkYASABKAsyLS5UaWNr",
            "VHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuQWNjb3VudEtleRI+Cgdz",
            "eW1ib2xzGAIgAygLMi0uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMu",
            "TGliLlN5bWJvbEluZm8iXwoLTWFwcGluZ0luZm8SOgoDa2V5GAEgASgLMi0u",
            "VGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLk1hcHBpbmdLZXkS",
            "FAoMZGlzcGxheV9uYW1lGAIgASgJIp8GChVNYXBwaW5nQ29sbGVjdGlvbklu",
            "Zm8SSwoTYmFyX3RvX2Jhcl9tYXBwaW5ncxgBIAMoCzIuLlRpY2tUcmFkZXIu",
            "QWxnby5Qcm90b2NvbC5HcnBjLkxpYi5NYXBwaW5nSW5mbxJOChZiYXJfdG9f",
            "ZG91YmxlX21hcHBpbmdzGAIgAygLMi4uVGlja1RyYWRlci5BbGdvLlByb3Rv",
            "Y29sLkdycGMuTGliLk1hcHBpbmdJbmZvEk0KFXF1b3RlX3RvX2Jhcl9tYXBw",
            "aW5ncxgDIAMoCzIuLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxp",
            "Yi5NYXBwaW5nSW5mbxJQChhxdW90ZV90b19kb3VibGVfbWFwcGluZ3MYBCAD",
            "KAsyLi5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuTWFwcGlu",
            "Z0luZm8SWgohZGVmYXVsdF9mdWxsX2Jhcl90b19iYXJfcmVkdWN0aW9uGAUg",
            "ASgLMi8uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLlJlZHVj",
            "dGlvbktleRJdCiRkZWZhdWx0X2Z1bGxfYmFyX3RvX2RvdWJsZV9yZWR1Y3Rp",
            "b24YBiABKAsyLy5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIu",
            "UmVkdWN0aW9uS2V5ElgKH2RlZmF1bHRfYmFyX3RvX2RvdWJsZV9yZWR1Y3Rp",
            "b24YByABKAsyLy5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIu",
            "UmVkdWN0aW9uS2V5ElcKHmRlZmF1bHRfcXVvdGVfdG9fYmFyX3JlZHVjdGlv",
            "bhgIIAEoCzIvLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5S",
            "ZWR1Y3Rpb25LZXkSWgohZGVmYXVsdF9xdW90ZV90b19kb3VibGVfcmVkdWN0",
            "aW9uGAkgASgLMi8uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGli",
            "LlJlZHVjdGlvbktleSKbAgoPQXBpTWV0YWRhdGFJbmZvEk8KC3RpbWVfZnJh",
            "bWVzGAEgAygOMjouVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGli",
            "LkFwaURlc2NyaXB0b3IuVGltZUZyYW1lEk8KC2xpbmVfc3R5bGVzGAIgAygO",
            "MjouVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLkFwaURlc2Ny",
            "aXB0b3IuTGluZVN0eWxlEhMKC3RoaWNrbmVzc2VzGAMgAygFElEKDG1hcmtl",
            "cl9zaXplcxgEIAMoDjI7LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBj",
            "LkxpYi5BcGlEZXNjcmlwdG9yLk1hcmtlclNpemUizwEKEFNldHVwQ29udGV4",
            "dEluZm8SVgoSZGVmYXVsdF90aW1lX2ZyYW1lGAEgASgOMjouVGlja1RyYWRl",
            "ci5BbGdvLlByb3RvY29sLkdycGMuTGliLkFwaURlc2NyaXB0b3IuVGltZUZy",
            "YW1lEhsKE2RlZmF1bHRfc3ltYm9sX2NvZGUYAiABKAkSRgoPZGVmYXVsdF9t",
            "YXBwaW5nGAMgASgLMi0uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMu",
            "TGliLk1hcHBpbmdLZXkinQMKE0Nvbm5lY3Rpb25FcnJvckluZm8SWAoEY29k",
            "ZRgBIAEoDjJKLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5D",
            "b25uZWN0aW9uRXJyb3JJbmZvLkNvbm5lY3Rpb25FcnJvckNvZGUSFAoMdGV4",
            "dF9tZXNzYWdlGAIgASgJIpUCChNDb25uZWN0aW9uRXJyb3JDb2RlEggKBE5P",
            "TkUQABIdChlVTktOT1dOX0NPTk5ORUNUSU9OX0VSUk9SEAESEQoNTkVUV09S",
            "S19FUlJPUhACEgsKB1RJTUVPVVQQAxITCg9CTE9DS0VEX0FDQ09VTlQQBBIU",
            "ChBDTElFTlRfSU5JVElBVEVEEAUSFwoTSU5WQUxJRF9DUkVERU5USUFMUxAG",
            "EhMKD1NMT1dfQ09OTkVDVElPThAHEhAKDFNFUlZFUl9FUlJPUhAIEhEKDUxP",
            "R0lOX0RFTEVURUQQCRIRCg1TRVJWRVJfTE9HT1VUEAoSDAoIQ0FOQ0VMRUQQ",
            "CxIWChJSRUpFQ1RFRF9CWV9TRVJWRVIQDCLiAgoQQWNjb3VudE1vZGVsSW5m",
            "bxI6CgNrZXkYASABKAsyLS5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3Jw",
            "Yy5MaWIuQWNjb3VudEtleRIYChB1c2VfbmV3X3Byb3RvY29sGAIgASgIEl0K",
            "EGNvbm5lY3Rpb25fc3RhdGUYAyABKA4yQy5UaWNrVHJhZGVyLkFsZ28uUHJv",
            "dG9jb2wuR3JwYy5MaWIuQWNjb3VudE1vZGVsSW5mby5Db25uZWN0aW9uU3Rh",
            "dGUSSgoKbGFzdF9lcnJvchgEIAEoCzI2LlRpY2tUcmFkZXIuQWxnby5Qcm90",
            "b2NvbC5HcnBjLkxpYi5Db25uZWN0aW9uRXJyb3JJbmZvIk0KD0Nvbm5lY3Rp",
            "b25TdGF0ZRILCgdPRkZMSU5FEAASDgoKQ09OTkVDVElORxABEgoKBk9OTElO",
            "RRACEhEKDURJU0NPTk5FQ1RJTkcQAyK5AwoMQm90TW9kZWxJbmZvEhMKC2lu",
            "c3RhbmNlX2lkGAEgASgJEj4KB2FjY291bnQYAiABKAsyLS5UaWNrVHJhZGVy",
            "LkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuQWNjb3VudEtleRJHCgVzdGF0ZRgD",
            "IAEoDjI4LlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5Cb3RN",
            "b2RlbEluZm8uQm90U3RhdGUSFQoNZmF1bHRfbWVzc2FnZRgEIAEoCRI/CgZj",
            "b25maWcYBSABKAsyLy5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5M",
            "aWIuUGx1Z2luQ29uZmlnEkcKCmRlc2NyaXB0b3IYBiABKAsyMy5UaWNrVHJh",
            "ZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuUGx1Z2luRGVzY3JpcHRvciJq",
            "CghCb3RTdGF0ZRILCgdPRkZMSU5FEAASDAoIU1RBUlRJTkcQARILCgdGQVVM",
            "VEVEEAISCgoGT05MSU5FEAMSDAoIU1RPUFBJTkcQBBIKCgZCUk9LRU4QBRIQ",
            "CgxSRUNPTk5FQ1RJTkcQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::TickTrader.Algo.Protocol.Grpc.Lib.KeysReflection.Descriptor, global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor, global::TickTrader.Algo.Protocol.Grpc.Lib.ConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo.Parser, new[]{ "Key", "Descriptor_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity), global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity.Parser, new[]{ "FileName", "FilePath", "CreatedUtc", "LastModifiedUtc", "Size", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.PackageInfo.Parser, new[]{ "Key", "Identity", "IsValid", "Plugins", "IsLocked", "IsObsolete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionInfo.Parser, new[]{ "Key", "Descriptor_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.CurrencyInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.CurrencyInfo.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataInfo.Parser, new[]{ "Key", "Symbols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo.Parser, new[]{ "Key", "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingCollectionInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.MappingCollectionInfo.Parser, new[]{ "BarToBarMappings", "BarToDoubleMappings", "QuoteToBarMappings", "QuoteToDoubleMappings", "DefaultFullBarToBarReduction", "DefaultFullBarToDoubleReduction", "DefaultBarToDoubleReduction", "DefaultQuoteToBarReduction", "DefaultQuoteToDoubleReduction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataInfo.Parser, new[]{ "TimeFrames", "LineStyles", "Thicknesses", "MarkerSizes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextInfo.Parser, new[]{ "DefaultTimeFrame", "DefaultSymbolCode", "DefaultMapping" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo.Parser, new[]{ "Code", "TextMessage" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo.Types.ConnectionErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo.Parser, new[]{ "Key", "UseNewProtocol", "ConnectionState", "LastError" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo.Types.ConnectionState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo), global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo.Parser, new[]{ "InstanceId", "Account", "State", "FaultMessage", "Config", "Descriptor_" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo.Types.BotState) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PluginInfo : pb::IMessage<PluginInfo> {
    private static readonly pb::MessageParser<PluginInfo> _parser = new pb::MessageParser<PluginInfo>(() => new PluginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginInfo(PluginInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Descriptor_ = other.descriptor_ != null ? other.Descriptor_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginInfo Clone() {
      return new PluginInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "descriptor" field.</summary>
    public const int Descriptor_FieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor descriptor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor Descriptor_ {
      get { return descriptor_; }
      set {
        descriptor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Descriptor_, other.Descriptor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (descriptor_ != null) hash ^= Descriptor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (descriptor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Descriptor_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (descriptor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Descriptor_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.descriptor_ != null) {
        if (descriptor_ == null) {
          descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor();
        }
        Descriptor_.MergeFrom(other.Descriptor_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (descriptor_ == null) {
              descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor();
            }
            input.ReadMessage(descriptor_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackageIdentity : pb::IMessage<PackageIdentity> {
    private static readonly pb::MessageParser<PackageIdentity> _parser = new pb::MessageParser<PackageIdentity>(() => new PackageIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIdentity(PackageIdentity other) : this() {
      fileName_ = other.fileName_;
      filePath_ = other.filePath_;
      CreatedUtc = other.createdUtc_ != null ? other.CreatedUtc.Clone() : null;
      LastModifiedUtc = other.lastModifiedUtc_ != null ? other.LastModifiedUtc.Clone() : null;
      size_ = other.size_;
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIdentity Clone() {
      return new PackageIdentity(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 2;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_utc" field.</summary>
    public const int CreatedUtcFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedUtc {
      get { return createdUtc_; }
      set {
        createdUtc_ = value;
      }
    }

    /// <summary>Field number for the "last_modified_utc" field.</summary>
    public const int LastModifiedUtcFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastModifiedUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastModifiedUtc {
      get { return lastModifiedUtc_; }
      set {
        lastModifiedUtc_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 6;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (FilePath != other.FilePath) return false;
      if (!object.Equals(CreatedUtc, other.CreatedUtc)) return false;
      if (!object.Equals(LastModifiedUtc, other.LastModifiedUtc)) return false;
      if (Size != other.Size) return false;
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (createdUtc_ != null) hash ^= CreatedUtc.GetHashCode();
      if (lastModifiedUtc_ != null) hash ^= LastModifiedUtc.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (FilePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FilePath);
      }
      if (createdUtc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedUtc);
      }
      if (lastModifiedUtc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastModifiedUtc);
      }
      if (Size != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Size);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (createdUtc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedUtc);
      }
      if (lastModifiedUtc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastModifiedUtc);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageIdentity other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.createdUtc_ != null) {
        if (createdUtc_ == null) {
          createdUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedUtc.MergeFrom(other.CreatedUtc);
      }
      if (other.lastModifiedUtc_ != null) {
        if (lastModifiedUtc_ == null) {
          lastModifiedUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastModifiedUtc.MergeFrom(other.LastModifiedUtc);
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 18: {
            FilePath = input.ReadString();
            break;
          }
          case 26: {
            if (createdUtc_ == null) {
              createdUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createdUtc_);
            break;
          }
          case 34: {
            if (lastModifiedUtc_ == null) {
              lastModifiedUtc_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(lastModifiedUtc_);
            break;
          }
          case 40: {
            Size = input.ReadInt64();
            break;
          }
          case 50: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackageInfo : pb::IMessage<PackageInfo> {
    private static readonly pb::MessageParser<PackageInfo> _parser = new pb::MessageParser<PackageInfo>(() => new PackageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageInfo(PackageInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      isValid_ = other.isValid_;
      plugins_ = other.plugins_.Clone();
      isLocked_ = other.isLocked_;
      isObsolete_ = other.isObsolete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageInfo Clone() {
      return new PackageInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PackageKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PackageKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "is_valid" field.</summary>
    public const int IsValidFieldNumber = 3;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "plugins" field.</summary>
    public const int PluginsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo> _repeated_plugins_codec
        = pb::FieldCodec.ForMessage(34, global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo> plugins_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.PluginInfo> Plugins {
      get { return plugins_; }
    }

    /// <summary>Field number for the "is_locked" field.</summary>
    public const int IsLockedFieldNumber = 5;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "is_obsolete" field.</summary>
    public const int IsObsoleteFieldNumber = 6;
    private bool isObsolete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsObsolete {
      get { return isObsolete_; }
      set {
        isObsolete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Identity, other.Identity)) return false;
      if (IsValid != other.IsValid) return false;
      if(!plugins_.Equals(other.plugins_)) return false;
      if (IsLocked != other.IsLocked) return false;
      if (IsObsolete != other.IsObsolete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      hash ^= plugins_.GetHashCode();
      if (IsLocked != false) hash ^= IsLocked.GetHashCode();
      if (IsObsolete != false) hash ^= IsObsolete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (identity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Identity);
      }
      if (IsValid != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsValid);
      }
      plugins_.WriteTo(output, _repeated_plugins_codec);
      if (IsLocked != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLocked);
      }
      if (IsObsolete != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsObsolete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      size += plugins_.CalculateSize(_repeated_plugins_codec);
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (IsObsolete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PackageKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      plugins_.Add(other.plugins_);
      if (other.IsLocked != false) {
        IsLocked = other.IsLocked;
      }
      if (other.IsObsolete != false) {
        IsObsolete = other.IsObsolete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PackageKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (identity_ == null) {
              identity_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PackageIdentity();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 24: {
            IsValid = input.ReadBool();
            break;
          }
          case 34: {
            plugins_.AddEntriesFrom(input, _repeated_plugins_codec);
            break;
          }
          case 40: {
            IsLocked = input.ReadBool();
            break;
          }
          case 48: {
            IsObsolete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReductionInfo : pb::IMessage<ReductionInfo> {
    private static readonly pb::MessageParser<ReductionInfo> _parser = new pb::MessageParser<ReductionInfo>(() => new ReductionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReductionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionInfo(ReductionInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Descriptor_ = other.descriptor_ != null ? other.Descriptor_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionInfo Clone() {
      return new ReductionInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "descriptor" field.</summary>
    public const int Descriptor_FieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor descriptor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor Descriptor_ {
      get { return descriptor_; }
      set {
        descriptor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReductionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReductionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Descriptor_, other.Descriptor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (descriptor_ != null) hash ^= Descriptor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (descriptor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Descriptor_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (descriptor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Descriptor_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReductionInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.descriptor_ != null) {
        if (descriptor_ == null) {
          descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor();
        }
        Descriptor_.MergeFrom(other.Descriptor_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (descriptor_ == null) {
              descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor();
            }
            input.ReadMessage(descriptor_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyInfo : pb::IMessage<CurrencyInfo> {
    private static readonly pb::MessageParser<CurrencyInfo> _parser = new pb::MessageParser<CurrencyInfo>(() => new CurrencyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyInfo(CurrencyInfo other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyInfo Clone() {
      return new CurrencyInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolInfo : pb::IMessage<SymbolInfo> {
    private static readonly pb::MessageParser<SymbolInfo> _parser = new pb::MessageParser<SymbolInfo>(() => new SymbolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfo(SymbolInfo other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfo Clone() {
      return new SymbolInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountMetadataInfo : pb::IMessage<AccountMetadataInfo> {
    private static readonly pb::MessageParser<AccountMetadataInfo> _parser = new pb::MessageParser<AccountMetadataInfo>(() => new AccountMetadataInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountMetadataInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMetadataInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMetadataInfo(AccountMetadataInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountMetadataInfo Clone() {
      return new AccountMetadataInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(18, global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo> symbols_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.SymbolInfo> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountMetadataInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountMetadataInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountMetadataInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
        }
        Key.MergeFrom(other.Key);
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MappingInfo : pb::IMessage<MappingInfo> {
    private static readonly pb::MessageParser<MappingInfo> _parser = new pb::MessageParser<MappingInfo>(() => new MappingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MappingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingInfo(MappingInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      displayName_ = other.displayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingInfo Clone() {
      return new MappingInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MappingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MappingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (DisplayName != other.DisplayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MappingInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MappingCollectionInfo : pb::IMessage<MappingCollectionInfo> {
    private static readonly pb::MessageParser<MappingCollectionInfo> _parser = new pb::MessageParser<MappingCollectionInfo>(() => new MappingCollectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MappingCollectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingCollectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingCollectionInfo(MappingCollectionInfo other) : this() {
      barToBarMappings_ = other.barToBarMappings_.Clone();
      barToDoubleMappings_ = other.barToDoubleMappings_.Clone();
      quoteToBarMappings_ = other.quoteToBarMappings_.Clone();
      quoteToDoubleMappings_ = other.quoteToDoubleMappings_.Clone();
      DefaultFullBarToBarReduction = other.defaultFullBarToBarReduction_ != null ? other.DefaultFullBarToBarReduction.Clone() : null;
      DefaultFullBarToDoubleReduction = other.defaultFullBarToDoubleReduction_ != null ? other.DefaultFullBarToDoubleReduction.Clone() : null;
      DefaultBarToDoubleReduction = other.defaultBarToDoubleReduction_ != null ? other.DefaultBarToDoubleReduction.Clone() : null;
      DefaultQuoteToBarReduction = other.defaultQuoteToBarReduction_ != null ? other.DefaultQuoteToBarReduction.Clone() : null;
      DefaultQuoteToDoubleReduction = other.defaultQuoteToDoubleReduction_ != null ? other.DefaultQuoteToDoubleReduction.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MappingCollectionInfo Clone() {
      return new MappingCollectionInfo(this);
    }

    /// <summary>Field number for the "bar_to_bar_mappings" field.</summary>
    public const int BarToBarMappingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> _repeated_barToBarMappings_codec
        = pb::FieldCodec.ForMessage(10, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> barToBarMappings_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> BarToBarMappings {
      get { return barToBarMappings_; }
    }

    /// <summary>Field number for the "bar_to_double_mappings" field.</summary>
    public const int BarToDoubleMappingsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> _repeated_barToDoubleMappings_codec
        = pb::FieldCodec.ForMessage(18, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> barToDoubleMappings_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> BarToDoubleMappings {
      get { return barToDoubleMappings_; }
    }

    /// <summary>Field number for the "quote_to_bar_mappings" field.</summary>
    public const int QuoteToBarMappingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> _repeated_quoteToBarMappings_codec
        = pb::FieldCodec.ForMessage(26, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> quoteToBarMappings_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> QuoteToBarMappings {
      get { return quoteToBarMappings_; }
    }

    /// <summary>Field number for the "quote_to_double_mappings" field.</summary>
    public const int QuoteToDoubleMappingsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> _repeated_quoteToDoubleMappings_codec
        = pb::FieldCodec.ForMessage(34, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> quoteToDoubleMappings_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingInfo> QuoteToDoubleMappings {
      get { return quoteToDoubleMappings_; }
    }

    /// <summary>Field number for the "default_full_bar_to_bar_reduction" field.</summary>
    public const int DefaultFullBarToBarReductionFieldNumber = 5;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey defaultFullBarToBarReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey DefaultFullBarToBarReduction {
      get { return defaultFullBarToBarReduction_; }
      set {
        defaultFullBarToBarReduction_ = value;
      }
    }

    /// <summary>Field number for the "default_full_bar_to_double_reduction" field.</summary>
    public const int DefaultFullBarToDoubleReductionFieldNumber = 6;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey defaultFullBarToDoubleReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey DefaultFullBarToDoubleReduction {
      get { return defaultFullBarToDoubleReduction_; }
      set {
        defaultFullBarToDoubleReduction_ = value;
      }
    }

    /// <summary>Field number for the "default_bar_to_double_reduction" field.</summary>
    public const int DefaultBarToDoubleReductionFieldNumber = 7;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey defaultBarToDoubleReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey DefaultBarToDoubleReduction {
      get { return defaultBarToDoubleReduction_; }
      set {
        defaultBarToDoubleReduction_ = value;
      }
    }

    /// <summary>Field number for the "default_quote_to_bar_reduction" field.</summary>
    public const int DefaultQuoteToBarReductionFieldNumber = 8;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey defaultQuoteToBarReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey DefaultQuoteToBarReduction {
      get { return defaultQuoteToBarReduction_; }
      set {
        defaultQuoteToBarReduction_ = value;
      }
    }

    /// <summary>Field number for the "default_quote_to_double_reduction" field.</summary>
    public const int DefaultQuoteToDoubleReductionFieldNumber = 9;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey defaultQuoteToDoubleReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey DefaultQuoteToDoubleReduction {
      get { return defaultQuoteToDoubleReduction_; }
      set {
        defaultQuoteToDoubleReduction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MappingCollectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MappingCollectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!barToBarMappings_.Equals(other.barToBarMappings_)) return false;
      if(!barToDoubleMappings_.Equals(other.barToDoubleMappings_)) return false;
      if(!quoteToBarMappings_.Equals(other.quoteToBarMappings_)) return false;
      if(!quoteToDoubleMappings_.Equals(other.quoteToDoubleMappings_)) return false;
      if (!object.Equals(DefaultFullBarToBarReduction, other.DefaultFullBarToBarReduction)) return false;
      if (!object.Equals(DefaultFullBarToDoubleReduction, other.DefaultFullBarToDoubleReduction)) return false;
      if (!object.Equals(DefaultBarToDoubleReduction, other.DefaultBarToDoubleReduction)) return false;
      if (!object.Equals(DefaultQuoteToBarReduction, other.DefaultQuoteToBarReduction)) return false;
      if (!object.Equals(DefaultQuoteToDoubleReduction, other.DefaultQuoteToDoubleReduction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= barToBarMappings_.GetHashCode();
      hash ^= barToDoubleMappings_.GetHashCode();
      hash ^= quoteToBarMappings_.GetHashCode();
      hash ^= quoteToDoubleMappings_.GetHashCode();
      if (defaultFullBarToBarReduction_ != null) hash ^= DefaultFullBarToBarReduction.GetHashCode();
      if (defaultFullBarToDoubleReduction_ != null) hash ^= DefaultFullBarToDoubleReduction.GetHashCode();
      if (defaultBarToDoubleReduction_ != null) hash ^= DefaultBarToDoubleReduction.GetHashCode();
      if (defaultQuoteToBarReduction_ != null) hash ^= DefaultQuoteToBarReduction.GetHashCode();
      if (defaultQuoteToDoubleReduction_ != null) hash ^= DefaultQuoteToDoubleReduction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      barToBarMappings_.WriteTo(output, _repeated_barToBarMappings_codec);
      barToDoubleMappings_.WriteTo(output, _repeated_barToDoubleMappings_codec);
      quoteToBarMappings_.WriteTo(output, _repeated_quoteToBarMappings_codec);
      quoteToDoubleMappings_.WriteTo(output, _repeated_quoteToDoubleMappings_codec);
      if (defaultFullBarToBarReduction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DefaultFullBarToBarReduction);
      }
      if (defaultFullBarToDoubleReduction_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DefaultFullBarToDoubleReduction);
      }
      if (defaultBarToDoubleReduction_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DefaultBarToDoubleReduction);
      }
      if (defaultQuoteToBarReduction_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DefaultQuoteToBarReduction);
      }
      if (defaultQuoteToDoubleReduction_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DefaultQuoteToDoubleReduction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += barToBarMappings_.CalculateSize(_repeated_barToBarMappings_codec);
      size += barToDoubleMappings_.CalculateSize(_repeated_barToDoubleMappings_codec);
      size += quoteToBarMappings_.CalculateSize(_repeated_quoteToBarMappings_codec);
      size += quoteToDoubleMappings_.CalculateSize(_repeated_quoteToDoubleMappings_codec);
      if (defaultFullBarToBarReduction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultFullBarToBarReduction);
      }
      if (defaultFullBarToDoubleReduction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultFullBarToDoubleReduction);
      }
      if (defaultBarToDoubleReduction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultBarToDoubleReduction);
      }
      if (defaultQuoteToBarReduction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultQuoteToBarReduction);
      }
      if (defaultQuoteToDoubleReduction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultQuoteToDoubleReduction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MappingCollectionInfo other) {
      if (other == null) {
        return;
      }
      barToBarMappings_.Add(other.barToBarMappings_);
      barToDoubleMappings_.Add(other.barToDoubleMappings_);
      quoteToBarMappings_.Add(other.quoteToBarMappings_);
      quoteToDoubleMappings_.Add(other.quoteToDoubleMappings_);
      if (other.defaultFullBarToBarReduction_ != null) {
        if (defaultFullBarToBarReduction_ == null) {
          defaultFullBarToBarReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        DefaultFullBarToBarReduction.MergeFrom(other.DefaultFullBarToBarReduction);
      }
      if (other.defaultFullBarToDoubleReduction_ != null) {
        if (defaultFullBarToDoubleReduction_ == null) {
          defaultFullBarToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        DefaultFullBarToDoubleReduction.MergeFrom(other.DefaultFullBarToDoubleReduction);
      }
      if (other.defaultBarToDoubleReduction_ != null) {
        if (defaultBarToDoubleReduction_ == null) {
          defaultBarToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        DefaultBarToDoubleReduction.MergeFrom(other.DefaultBarToDoubleReduction);
      }
      if (other.defaultQuoteToBarReduction_ != null) {
        if (defaultQuoteToBarReduction_ == null) {
          defaultQuoteToBarReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        DefaultQuoteToBarReduction.MergeFrom(other.DefaultQuoteToBarReduction);
      }
      if (other.defaultQuoteToDoubleReduction_ != null) {
        if (defaultQuoteToDoubleReduction_ == null) {
          defaultQuoteToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
        }
        DefaultQuoteToDoubleReduction.MergeFrom(other.DefaultQuoteToDoubleReduction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            barToBarMappings_.AddEntriesFrom(input, _repeated_barToBarMappings_codec);
            break;
          }
          case 18: {
            barToDoubleMappings_.AddEntriesFrom(input, _repeated_barToDoubleMappings_codec);
            break;
          }
          case 26: {
            quoteToBarMappings_.AddEntriesFrom(input, _repeated_quoteToBarMappings_codec);
            break;
          }
          case 34: {
            quoteToDoubleMappings_.AddEntriesFrom(input, _repeated_quoteToDoubleMappings_codec);
            break;
          }
          case 42: {
            if (defaultFullBarToBarReduction_ == null) {
              defaultFullBarToBarReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(defaultFullBarToBarReduction_);
            break;
          }
          case 50: {
            if (defaultFullBarToDoubleReduction_ == null) {
              defaultFullBarToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(defaultFullBarToDoubleReduction_);
            break;
          }
          case 58: {
            if (defaultBarToDoubleReduction_ == null) {
              defaultBarToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(defaultBarToDoubleReduction_);
            break;
          }
          case 66: {
            if (defaultQuoteToBarReduction_ == null) {
              defaultQuoteToBarReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(defaultQuoteToBarReduction_);
            break;
          }
          case 74: {
            if (defaultQuoteToDoubleReduction_ == null) {
              defaultQuoteToDoubleReduction_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionKey();
            }
            input.ReadMessage(defaultQuoteToDoubleReduction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiMetadataInfo : pb::IMessage<ApiMetadataInfo> {
    private static readonly pb::MessageParser<ApiMetadataInfo> _parser = new pb::MessageParser<ApiMetadataInfo>(() => new ApiMetadataInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiMetadataInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMetadataInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMetadataInfo(ApiMetadataInfo other) : this() {
      timeFrames_ = other.timeFrames_.Clone();
      lineStyles_ = other.lineStyles_.Clone();
      thicknesses_ = other.thicknesses_.Clone();
      markerSizes_ = other.markerSizes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMetadataInfo Clone() {
      return new ApiMetadataInfo(this);
    }

    /// <summary>Field number for the "time_frames" field.</summary>
    public const int TimeFramesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame> _repeated_timeFrames_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame) x);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame> timeFrames_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame> TimeFrames {
      get { return timeFrames_; }
    }

    /// <summary>Field number for the "line_styles" field.</summary>
    public const int LineStylesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle> _repeated_lineStyles_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle) x);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle> lineStyles_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle> LineStyles {
      get { return lineStyles_; }
    }

    /// <summary>Field number for the "thicknesses" field.</summary>
    public const int ThicknessesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_thicknesses_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> thicknesses_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Thicknesses {
      get { return thicknesses_; }
    }

    /// <summary>Field number for the "marker_sizes" field.</summary>
    public const int MarkerSizesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize> _repeated_markerSizes_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize) x);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize> markerSizes_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize> MarkerSizes {
      get { return markerSizes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiMetadataInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiMetadataInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timeFrames_.Equals(other.timeFrames_)) return false;
      if(!lineStyles_.Equals(other.lineStyles_)) return false;
      if(!thicknesses_.Equals(other.thicknesses_)) return false;
      if(!markerSizes_.Equals(other.markerSizes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timeFrames_.GetHashCode();
      hash ^= lineStyles_.GetHashCode();
      hash ^= thicknesses_.GetHashCode();
      hash ^= markerSizes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      timeFrames_.WriteTo(output, _repeated_timeFrames_codec);
      lineStyles_.WriteTo(output, _repeated_lineStyles_codec);
      thicknesses_.WriteTo(output, _repeated_thicknesses_codec);
      markerSizes_.WriteTo(output, _repeated_markerSizes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += timeFrames_.CalculateSize(_repeated_timeFrames_codec);
      size += lineStyles_.CalculateSize(_repeated_lineStyles_codec);
      size += thicknesses_.CalculateSize(_repeated_thicknesses_codec);
      size += markerSizes_.CalculateSize(_repeated_markerSizes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiMetadataInfo other) {
      if (other == null) {
        return;
      }
      timeFrames_.Add(other.timeFrames_);
      lineStyles_.Add(other.lineStyles_);
      thicknesses_.Add(other.thicknesses_);
      markerSizes_.Add(other.markerSizes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            timeFrames_.AddEntriesFrom(input, _repeated_timeFrames_codec);
            break;
          }
          case 18:
          case 16: {
            lineStyles_.AddEntriesFrom(input, _repeated_lineStyles_codec);
            break;
          }
          case 26:
          case 24: {
            thicknesses_.AddEntriesFrom(input, _repeated_thicknesses_codec);
            break;
          }
          case 34:
          case 32: {
            markerSizes_.AddEntriesFrom(input, _repeated_markerSizes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetupContextInfo : pb::IMessage<SetupContextInfo> {
    private static readonly pb::MessageParser<SetupContextInfo> _parser = new pb::MessageParser<SetupContextInfo>(() => new SetupContextInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetupContextInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetupContextInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetupContextInfo(SetupContextInfo other) : this() {
      defaultTimeFrame_ = other.defaultTimeFrame_;
      defaultSymbolCode_ = other.defaultSymbolCode_;
      DefaultMapping = other.defaultMapping_ != null ? other.DefaultMapping.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetupContextInfo Clone() {
      return new SetupContextInfo(this);
    }

    /// <summary>Field number for the "default_time_frame" field.</summary>
    public const int DefaultTimeFrameFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame defaultTimeFrame_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame DefaultTimeFrame {
      get { return defaultTimeFrame_; }
      set {
        defaultTimeFrame_ = value;
      }
    }

    /// <summary>Field number for the "default_symbol_code" field.</summary>
    public const int DefaultSymbolCodeFieldNumber = 2;
    private string defaultSymbolCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultSymbolCode {
      get { return defaultSymbolCode_; }
      set {
        defaultSymbolCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_mapping" field.</summary>
    public const int DefaultMappingFieldNumber = 3;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey defaultMapping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey DefaultMapping {
      get { return defaultMapping_; }
      set {
        defaultMapping_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetupContextInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetupContextInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultTimeFrame != other.DefaultTimeFrame) return false;
      if (DefaultSymbolCode != other.DefaultSymbolCode) return false;
      if (!object.Equals(DefaultMapping, other.DefaultMapping)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultTimeFrame != 0) hash ^= DefaultTimeFrame.GetHashCode();
      if (DefaultSymbolCode.Length != 0) hash ^= DefaultSymbolCode.GetHashCode();
      if (defaultMapping_ != null) hash ^= DefaultMapping.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultTimeFrame != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DefaultTimeFrame);
      }
      if (DefaultSymbolCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultSymbolCode);
      }
      if (defaultMapping_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultMapping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefaultTimeFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultTimeFrame);
      }
      if (DefaultSymbolCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultSymbolCode);
      }
      if (defaultMapping_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultMapping);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetupContextInfo other) {
      if (other == null) {
        return;
      }
      if (other.DefaultTimeFrame != 0) {
        DefaultTimeFrame = other.DefaultTimeFrame;
      }
      if (other.DefaultSymbolCode.Length != 0) {
        DefaultSymbolCode = other.DefaultSymbolCode;
      }
      if (other.defaultMapping_ != null) {
        if (defaultMapping_ == null) {
          defaultMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
        }
        DefaultMapping.MergeFrom(other.DefaultMapping);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            defaultTimeFrame_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame) input.ReadEnum();
            break;
          }
          case 18: {
            DefaultSymbolCode = input.ReadString();
            break;
          }
          case 26: {
            if (defaultMapping_ == null) {
              defaultMapping_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.MappingKey();
            }
            input.ReadMessage(defaultMapping_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionErrorInfo : pb::IMessage<ConnectionErrorInfo> {
    private static readonly pb::MessageParser<ConnectionErrorInfo> _parser = new pb::MessageParser<ConnectionErrorInfo>(() => new ConnectionErrorInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionErrorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionErrorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionErrorInfo(ConnectionErrorInfo other) : this() {
      code_ = other.code_;
      textMessage_ = other.textMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionErrorInfo Clone() {
      return new ConnectionErrorInfo(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo.Types.ConnectionErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo.Types.ConnectionErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 2;
    private string textMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionErrorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionErrorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (TextMessage != other.TextMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (TextMessage.Length != 0) hash ^= TextMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (TextMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TextMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (TextMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionErrorInfo other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.TextMessage.Length != 0) {
        TextMessage = other.TextMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo.Types.ConnectionErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            TextMessage = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConnectionErrorInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionErrorCode {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("UNKNOWN_CONNNECTION_ERROR")] UnknownConnnectionError = 1,
        [pbr::OriginalName("NETWORK_ERROR")] NetworkError = 2,
        [pbr::OriginalName("TIMEOUT")] Timeout = 3,
        [pbr::OriginalName("BLOCKED_ACCOUNT")] BlockedAccount = 4,
        [pbr::OriginalName("CLIENT_INITIATED")] ClientInitiated = 5,
        [pbr::OriginalName("INVALID_CREDENTIALS")] InvalidCredentials = 6,
        [pbr::OriginalName("SLOW_CONNECTION")] SlowConnection = 7,
        [pbr::OriginalName("SERVER_ERROR")] ServerError = 8,
        [pbr::OriginalName("LOGIN_DELETED")] LoginDeleted = 9,
        [pbr::OriginalName("SERVER_LOGOUT")] ServerLogout = 10,
        [pbr::OriginalName("CANCELED")] Canceled = 11,
        [pbr::OriginalName("REJECTED_BY_SERVER")] RejectedByServer = 12,
      }

    }
    #endregion

  }

  public sealed partial class AccountModelInfo : pb::IMessage<AccountModelInfo> {
    private static readonly pb::MessageParser<AccountModelInfo> _parser = new pb::MessageParser<AccountModelInfo>(() => new AccountModelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountModelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountModelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountModelInfo(AccountModelInfo other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      useNewProtocol_ = other.useNewProtocol_;
      connectionState_ = other.connectionState_;
      LastError = other.lastError_ != null ? other.LastError.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountModelInfo Clone() {
      return new AccountModelInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "use_new_protocol" field.</summary>
    public const int UseNewProtocolFieldNumber = 2;
    private bool useNewProtocol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseNewProtocol {
      get { return useNewProtocol_; }
      set {
        useNewProtocol_ = value;
      }
    }

    /// <summary>Field number for the "connection_state" field.</summary>
    public const int ConnectionStateFieldNumber = 3;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo.Types.ConnectionState connectionState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo.Types.ConnectionState ConnectionState {
      get { return connectionState_; }
      set {
        connectionState_ = value;
      }
    }

    /// <summary>Field number for the "last_error" field.</summary>
    public const int LastErrorFieldNumber = 4;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo lastError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo LastError {
      get { return lastError_; }
      set {
        lastError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountModelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountModelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (UseNewProtocol != other.UseNewProtocol) return false;
      if (ConnectionState != other.ConnectionState) return false;
      if (!object.Equals(LastError, other.LastError)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (UseNewProtocol != false) hash ^= UseNewProtocol.GetHashCode();
      if (ConnectionState != 0) hash ^= ConnectionState.GetHashCode();
      if (lastError_ != null) hash ^= LastError.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (UseNewProtocol != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseNewProtocol);
      }
      if (ConnectionState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ConnectionState);
      }
      if (lastError_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (UseNewProtocol != false) {
        size += 1 + 1;
      }
      if (ConnectionState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
      }
      if (lastError_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastError);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountModelInfo other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.UseNewProtocol != false) {
        UseNewProtocol = other.UseNewProtocol;
      }
      if (other.ConnectionState != 0) {
        ConnectionState = other.ConnectionState;
      }
      if (other.lastError_ != null) {
        if (lastError_ == null) {
          lastError_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo();
        }
        LastError.MergeFrom(other.LastError);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 16: {
            UseNewProtocol = input.ReadBool();
            break;
          }
          case 24: {
            connectionState_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.AccountModelInfo.Types.ConnectionState) input.ReadEnum();
            break;
          }
          case 34: {
            if (lastError_ == null) {
              lastError_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.ConnectionErrorInfo();
            }
            input.ReadMessage(lastError_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AccountModelInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionState {
        [pbr::OriginalName("OFFLINE")] Offline = 0,
        [pbr::OriginalName("CONNECTING")] Connecting = 1,
        [pbr::OriginalName("ONLINE")] Online = 2,
        [pbr::OriginalName("DISCONNECTING")] Disconnecting = 3,
      }

    }
    #endregion

  }

  public sealed partial class BotModelInfo : pb::IMessage<BotModelInfo> {
    private static readonly pb::MessageParser<BotModelInfo> _parser = new pb::MessageParser<BotModelInfo>(() => new BotModelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotModelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.MetadataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotModelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotModelInfo(BotModelInfo other) : this() {
      instanceId_ = other.instanceId_;
      Account = other.account_ != null ? other.Account.Clone() : null;
      state_ = other.state_;
      faultMessage_ = other.faultMessage_;
      Config = other.config_ != null ? other.Config.Clone() : null;
      Descriptor_ = other.descriptor_ != null ? other.Descriptor_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotModelInfo Clone() {
      return new BotModelInfo(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo.Types.BotState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo.Types.BotState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "fault_message" field.</summary>
    public const int FaultMessageFieldNumber = 4;
    private string faultMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FaultMessage {
      get { return faultMessage_; }
      set {
        faultMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 5;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "descriptor" field.</summary>
    public const int Descriptor_FieldNumber = 6;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor descriptor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor Descriptor_ {
      get { return descriptor_; }
      set {
        descriptor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotModelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotModelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (State != other.State) return false;
      if (FaultMessage != other.FaultMessage) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(Descriptor_, other.Descriptor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (FaultMessage.Length != 0) hash ^= FaultMessage.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (descriptor_ != null) hash ^= Descriptor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (account_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Account);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (FaultMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FaultMessage);
      }
      if (config_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Config);
      }
      if (descriptor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Descriptor_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (FaultMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaultMessage);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (descriptor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Descriptor_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotModelInfo other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.FaultMessage.Length != 0) {
        FaultMessage = other.FaultMessage;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.descriptor_ != null) {
        if (descriptor_ == null) {
          descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor();
        }
        Descriptor_.MergeFrom(other.Descriptor_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            if (account_ == null) {
              account_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.AccountKey();
            }
            input.ReadMessage(account_);
            break;
          }
          case 24: {
            state_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.BotModelInfo.Types.BotState) input.ReadEnum();
            break;
          }
          case 34: {
            FaultMessage = input.ReadString();
            break;
          }
          case 42: {
            if (config_ == null) {
              config_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 50: {
            if (descriptor_ == null) {
              descriptor_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor();
            }
            input.ReadMessage(descriptor_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BotModelInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BotState {
        [pbr::OriginalName("OFFLINE")] Offline = 0,
        [pbr::OriginalName("STARTING")] Starting = 1,
        [pbr::OriginalName("FAULTED")] Faulted = 2,
        [pbr::OriginalName("ONLINE")] Online = 3,
        [pbr::OriginalName("STOPPING")] Stopping = 4,
        [pbr::OriginalName("BROKEN")] Broken = 5,
        [pbr::OriginalName("RECONNECTING")] Reconnecting = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
