// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bot_agent.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TickTrader.Algo.Protocol.Grpc.Lib {
  public static partial class BotAgent
  {
    static readonly string __ServiceName = "TickTrader.Algo.Protocol.Grpc.Lib.BotAgent";

    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest> __Marshaller_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse> __Marshaller_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest> __Marshaller_PackageListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse> __Marshaller_PackageListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest> __Marshaller_AccountListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse> __Marshaller_AccountListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest> __Marshaller_BotListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse> __Marshaller_BotListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest> __Marshaller_SubscribeToUpdatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo> __Marshaller_UpdateInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest> __Marshaller_ApiMetadataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse> __Marshaller_ApiMetadataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest> __Marshaller_MappingsInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse> __Marshaller_MappingsInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest> __Marshaller_SetupContextRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse> __Marshaller_SetupContextResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest> __Marshaller_AccountMetadataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse> __Marshaller_AccountMetadataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest> __Marshaller_StartBotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse> __Marshaller_StartBotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest> __Marshaller_StopBotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse> __Marshaller_StopBotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest> __Marshaller_AddBotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse> __Marshaller_AddBotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest> __Marshaller_RemoveBotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse> __Marshaller_RemoveBotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest> __Marshaller_ChangeBotConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse> __Marshaller_ChangeBotConfigResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest> __Marshaller_AddAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse> __Marshaller_AddAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest> __Marshaller_RemoveAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse> __Marshaller_RemoveAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest> __Marshaller_ChangeAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse> __Marshaller_ChangeAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest> __Marshaller_TestAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse> __Marshaller_TestAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest> __Marshaller_TestAccountCredsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse> __Marshaller_TestAccountCredsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest> __Marshaller_UploadPackageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse> __Marshaller_UploadPackageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest> __Marshaller_RemovePackageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse> __Marshaller_RemovePackageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest> __Marshaller_DownloadPackageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse> __Marshaller_DownloadPackageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse> __Method_Login = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse> __Method_GetPackageList = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPackageList",
        __Marshaller_PackageListRequest,
        __Marshaller_PackageListResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse> __Method_GetAccountList = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountList",
        __Marshaller_AccountListRequest,
        __Marshaller_AccountListResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse> __Method_GetBotList = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBotList",
        __Marshaller_BotListRequest,
        __Marshaller_BotListResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo> __Method_SubscribeToUpdates = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToUpdates",
        __Marshaller_SubscribeToUpdatesRequest,
        __Marshaller_UpdateInfo);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse> __Method_GetApiMetadata = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApiMetadata",
        __Marshaller_ApiMetadataRequest,
        __Marshaller_ApiMetadataResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse> __Method_GetMappingsInfo = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMappingsInfo",
        __Marshaller_MappingsInfoRequest,
        __Marshaller_MappingsInfoResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse> __Method_GetSetupContext = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSetupContext",
        __Marshaller_SetupContextRequest,
        __Marshaller_SetupContextResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse> __Method_GetAccountMetadata = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountMetadata",
        __Marshaller_AccountMetadataRequest,
        __Marshaller_AccountMetadataResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse> __Method_StartBot = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartBot",
        __Marshaller_StartBotRequest,
        __Marshaller_StartBotResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse> __Method_StopBot = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopBot",
        __Marshaller_StopBotRequest,
        __Marshaller_StopBotResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse> __Method_AddBot = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddBot",
        __Marshaller_AddBotRequest,
        __Marshaller_AddBotResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse> __Method_RemoveBot = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveBot",
        __Marshaller_RemoveBotRequest,
        __Marshaller_RemoveBotResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse> __Method_ChangeBotConfig = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeBotConfig",
        __Marshaller_ChangeBotConfigRequest,
        __Marshaller_ChangeBotConfigResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse> __Method_AddAccount = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccount",
        __Marshaller_AddAccountRequest,
        __Marshaller_AddAccountResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse> __Method_RemoveAccount = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAccount",
        __Marshaller_RemoveAccountRequest,
        __Marshaller_RemoveAccountResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse> __Method_ChangeAccount = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeAccount",
        __Marshaller_ChangeAccountRequest,
        __Marshaller_ChangeAccountResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse> __Method_TestAccount = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestAccount",
        __Marshaller_TestAccountRequest,
        __Marshaller_TestAccountResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse> __Method_TestAccountCreds = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestAccountCreds",
        __Marshaller_TestAccountCredsRequest,
        __Marshaller_TestAccountCredsResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse> __Method_UploadPackage = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadPackage",
        __Marshaller_UploadPackageRequest,
        __Marshaller_UploadPackageResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse> __Method_RemovePackage = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePackage",
        __Marshaller_RemovePackageRequest,
        __Marshaller_RemovePackageResponse);

    static readonly grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse> __Method_DownloadPackage = new grpc::Method<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest, global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DownloadPackage",
        __Marshaller_DownloadPackageRequest,
        __Marshaller_DownloadPackageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.BotAgentReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BotAgent</summary>
    public abstract partial class BotAgentBase
    {
      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse> Login(global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse> GetPackageList(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse> GetAccountList(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse> GetBotList(global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeToUpdates(global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest request, grpc::IServerStreamWriter<global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse> GetApiMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse> GetMappingsInfo(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse> GetSetupContext(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse> GetAccountMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse> StartBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse> StopBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse> AddBot(global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse> RemoveBot(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse> ChangeBotConfig(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse> AddAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse> RemoveAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse> ChangeAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse> TestAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse> TestAccountCreds(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse> UploadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse> RemovePackage(global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse> DownloadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BotAgent</summary>
    public partial class BotAgentClient : grpc::ClientBase<BotAgentClient>
    {
      /// <summary>Creates a new client for BotAgent</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BotAgentClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BotAgent that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BotAgentClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BotAgentClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BotAgentClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse Login(global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse Login(global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse> LoginAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.LoginResponse> LoginAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse GetPackageList(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPackageList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse GetPackageList(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPackageList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse> GetPackageListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPackageListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListResponse> GetPackageListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.PackageListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPackageList, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse GetAccountList(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse GetAccountList(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse> GetAccountListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListResponse> GetAccountListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountList, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse GetBotList(global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBotList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse GetBotList(global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBotList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse> GetBotListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBotListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.BotListResponse> GetBotListAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.BotListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBotList, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo> SubscribeToUpdates(global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToUpdates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::TickTrader.Algo.Protocol.Grpc.Lib.UpdateInfo> SubscribeToUpdates(global::TickTrader.Algo.Protocol.Grpc.Lib.SubscribeToUpdatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToUpdates, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse GetApiMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApiMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse GetApiMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApiMetadata, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse> GetApiMetadataAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApiMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataResponse> GetApiMetadataAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApiMetadata, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse GetMappingsInfo(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMappingsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse GetMappingsInfo(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMappingsInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse> GetMappingsInfoAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMappingsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoResponse> GetMappingsInfoAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.MappingsInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMappingsInfo, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse GetSetupContext(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSetupContext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse GetSetupContext(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSetupContext, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse> GetSetupContextAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSetupContextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextResponse> GetSetupContextAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.SetupContextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSetupContext, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse GetAccountMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse GetAccountMetadata(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountMetadata, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse> GetAccountMetadataAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataResponse> GetAccountMetadataAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AccountMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountMetadata, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse StartBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse StartBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartBot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse> StartBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotResponse> StartBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.StartBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartBot, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse StopBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopBot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse StopBot(global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopBot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse> StopBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopBotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotResponse> StopBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.StopBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopBot, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse AddBot(global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse AddBot(global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddBot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse> AddBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotResponse> AddBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AddBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddBot, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse RemoveBot(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveBot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse RemoveBot(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveBot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse> RemoveBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveBotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotResponse> RemoveBotAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveBotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveBot, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse ChangeBotConfig(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeBotConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse ChangeBotConfig(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeBotConfig, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse> ChangeBotConfigAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeBotConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigResponse> ChangeBotConfigAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeBotConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeBotConfig, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse AddAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse AddAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse> AddAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountResponse> AddAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.AddAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccount, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse RemoveAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse RemoveAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse> RemoveAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountResponse> RemoveAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemoveAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAccount, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse ChangeAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse ChangeAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse> ChangeAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountResponse> ChangeAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.ChangeAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeAccount, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse TestAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse TestAccount(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse> TestAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountResponse> TestAccountAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestAccount, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse TestAccountCreds(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestAccountCreds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse TestAccountCreds(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestAccountCreds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse> TestAccountCredsAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestAccountCredsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsResponse> TestAccountCredsAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.TestAccountCredsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestAccountCreds, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse UploadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadPackage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse UploadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadPackage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse> UploadPackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadPackageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageResponse> UploadPackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.UploadPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadPackage, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse RemovePackage(global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePackage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse RemovePackage(global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePackage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse> RemovePackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePackageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageResponse> RemovePackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.RemovePackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePackage, null, options, request);
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse DownloadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DownloadPackage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse DownloadPackage(global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DownloadPackage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse> DownloadPackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DownloadPackageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageResponse> DownloadPackageAsync(global::TickTrader.Algo.Protocol.Grpc.Lib.DownloadPackageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DownloadPackage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BotAgentClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BotAgentClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BotAgentBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_GetPackageList, serviceImpl.GetPackageList)
          .AddMethod(__Method_GetAccountList, serviceImpl.GetAccountList)
          .AddMethod(__Method_GetBotList, serviceImpl.GetBotList)
          .AddMethod(__Method_SubscribeToUpdates, serviceImpl.SubscribeToUpdates)
          .AddMethod(__Method_GetApiMetadata, serviceImpl.GetApiMetadata)
          .AddMethod(__Method_GetMappingsInfo, serviceImpl.GetMappingsInfo)
          .AddMethod(__Method_GetSetupContext, serviceImpl.GetSetupContext)
          .AddMethod(__Method_GetAccountMetadata, serviceImpl.GetAccountMetadata)
          .AddMethod(__Method_StartBot, serviceImpl.StartBot)
          .AddMethod(__Method_StopBot, serviceImpl.StopBot)
          .AddMethod(__Method_AddBot, serviceImpl.AddBot)
          .AddMethod(__Method_RemoveBot, serviceImpl.RemoveBot)
          .AddMethod(__Method_ChangeBotConfig, serviceImpl.ChangeBotConfig)
          .AddMethod(__Method_AddAccount, serviceImpl.AddAccount)
          .AddMethod(__Method_RemoveAccount, serviceImpl.RemoveAccount)
          .AddMethod(__Method_ChangeAccount, serviceImpl.ChangeAccount)
          .AddMethod(__Method_TestAccount, serviceImpl.TestAccount)
          .AddMethod(__Method_TestAccountCreds, serviceImpl.TestAccountCreds)
          .AddMethod(__Method_UploadPackage, serviceImpl.UploadPackage)
          .AddMethod(__Method_RemovePackage, serviceImpl.RemovePackage)
          .AddMethod(__Method_DownloadPackage, serviceImpl.DownloadPackage).Build();
    }

  }
}
#endregion
