<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true">
  <!--
    internalLogLevel="Warn"
    internalLogFile="c:\temp\internal-nlog.txt"
  -->
  
  <!-- Load the ASP.NET Core plugin -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <targets>

    <target name="fullLogWrapper" xsi:type="AsyncWrapper">
      <target xsi:type="File" name="fullLogFile" fileName="${basedir}\Logs\server-full.log"
              layout="${longdate}|${pad:padding=5:inner=${level}}|${logger}|${message} ${exception}"
              archiveFileName="${basedir}\Logs\Archives\server-full-{#}.zip" archiveEvery="Day" archiveNumbering="Date"
              enableArchiveFileCompression="true" />
    </target>

    <target name="logWrapper" xsi:type="AsyncWrapper">
        <target xsi:type="File" name="logFile" fileName="${basedir}\Logs\server.log"
                layout="${longdate}|${pad:padding=5:inner=${level}}|${logger}|${message} ${exception:format=toString}"
                archiveFileName="${basedir}\Logs\Archives\server-{#}.zip" archiveEvery="Day" archiveNumbering="Date"
                enableArchiveFileCompression="true" />
    </target>

    <target name="errorWrapper" xsi:type="AsyncWrapper">
      <target xsi:type="File" name="errorFile" fileName="${basedir}\Logs\server-error.log"
              layout="${longdate}|${pad:padding=5:inner=${level}}|${logger}|${message} ${exception:format=toString}"
              archiveFileName="${basedir}\Logs\Archives\server-error-{#}.zip" archiveEvery="Day" archiveNumbering="Date"
              enableArchiveFileCompression="true" />
    </target>

    <target name="consoleWrapper" xsi:type="AsyncWrapper">
      <target xsi:type="ColoredConsole"
              name="coloredConsole"
              layout="${longdate}|${pad:padding=5:inner=${level}}|${logger}|${message} ${exception}"
              useDefaultRowHighlightingRules="false"
              detectConsoleAvailable="true">
        <highlight-row condition="level == LogLevel.Debug" foregroundColor="Green" />
        <highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
        <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
        <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
        <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
      </target>
    </target>

    <!-- write to the void aka just remove -->
    <target xsi:type="Null" name="blackhole" />
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>

    <logger name="*" minlevel="Debug" maxlevel="Fatal" writeTo="fullLogWrapper">
      <filters>
        <when condition="level == LogLevel.Debug and (starts-with(logger, 'Microsoft') or starts-with(logger, 'System'))" action="Ignore"></when>
      </filters>
    </logger>

    <logger name="*" minlevel="Debug" writeTo="consoleWrapper">
      <filters>
        <when condition="level == LogLevel.Debug and (starts-with(logger, 'Microsoft') or starts-with(logger, 'System'))" action="Ignore"></when>
        <when condition="level == LogLevel.Info and starts-with(logger, 'Microsoft.AspNetCore')" action="Ignore"></when>
      </filters>
    </logger>

    <logger name="*" minlevel="Debug" maxlevel="Fatal" writeTo="logWrapper">
      <filters>
        <when condition="level == LogLevel.Debug and (starts-with(logger, 'Microsoft') or starts-with(logger, 'System'))" action="Ignore"></when>
        <when condition="level == LogLevel.Info and starts-with(logger, 'Microsoft.AspNetCore')" action="Ignore"></when>
      </filters>
    </logger>

    <logger name="*" minlevel="Error" maxlevel="Fatal" writeTo="errorWrapper" />

    <!--Skip Microsoft logs and so log only own logs-->
    <!--<logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />-->
  </rules>
</nlog>