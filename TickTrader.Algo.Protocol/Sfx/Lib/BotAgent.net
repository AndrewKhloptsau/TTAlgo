// Set message id explicitly to improve readability.
// Last message id = 23. Update when adding new messages.
protocol BotAgent(1,3)
{
    message LoginRequest(0)
    {
        ustring Username;
        ustring Password;
    }

    message LoginReport_1(1)
    {
        int32 CurrentVersion;
    }

    message LoginReport(20);

    enum LoginRejectReason
    {
        InvalidCredentials,
        VersionMismatch,
        InternalServerError,
    }

    message LoginReject(2)
    {
        LoginRejectReason Reason;
        ustring? Text;
    }

    message LogoutRequest(3);

    enum LogoutReason
    {
        ClientRequest,
        ServerLogout,
        InternalServerError,
    }

    message LogoutReport(4)
    {
        LogoutReason Reason;
        ustring? Text;
    }

    message Request(5)
    {
        string Id;
    }

    enum RequestExecState
    {
        Completed,
        InternalServerError,
    }

    message Report(6)
    {
        string RequestId;
        RequestExecState RequestState;
        ustring? Text;
    }

    enum UpdateType
    {
        Added,
        Updated,
        Removed,
    }

    message Update(7)
    {
        string Id;
        UpdateType Type;
    }

    group PluginKey
    {
        ustring PackageName;
        ustring DescriptorId;
    }

    enum PluginType
    {
        Indicator,
        Robot,
        Unknown,
    }

    group PluginDescriptor
    {
        ustring? ApiVersion;
        ustring Id;
        ustring DisplayName;
        ustring UserDisplayName;
        ustring? Category;
        ustring? Version;
        ustring? Description;
        ustring? Copyright;
        PluginType Type;
    }

    group PluginInfo
    {
        PluginKey Key;
        PluginDescriptor Descriptor;
    }

    group PackageModel
    {
        ustring Name;
        timestamp Created;
        PluginInfo[] Plugins;
    }

    group AccountKey
    {
        ustring Login;
        ustring Server;
    }

    group PluginPermissions
    {
        bool TradeAllowed;
        bool Isolated;
    }

    enum BotState
    {
        Offline,
        Starting,
        Faulted,
        Online,
        Stopping,
        Broken,
        Reconnecting,
    }

    group BotModel
    {
        ustring InstanceId;
        BotState State;
        PluginPermissions Permissions;
        AccountKey Account;
        PluginKey Plugin;
    }

    enum ConnectionState
    {
    	Offline,
    	Connecting,
    	Online,
    	Disconnecting,
    }

    enum ConnectionErrorCode
    {
    	None,
        Unknown,
        NetworkError,
        Timeout,
        BlockedAccount,
        ClientInitiated,
        InvalidCredentials,
        SlowConnection,
        ServerError,
        LoginDeleted,
        ServerLogout,
        Canceled,
    }

    group ConnectionErrorModel
    {
    	ConnectionErrorCode Code;
    	ustring? Text;
    }

    group AccountModel_1
    {
        ustring Login;
        ustring Server;
    }

    group AccountModel
    {
        ustring Login;
        ustring Server;
        bool UseNewProtocol;
        ConnectionState ConnectionState;
        ConnectionErrorModel LastError;
    }

    message AccountListRequest(8) : Request;

    message AccountListReport_1(9) : Report
    {
        AccountModel_1[] Accounts;
    }

    message AccountListReport(21) : Report
    {
        AccountModel[] Accounts;
    }

    message BotListRequest(10) : Request;

    message BotListReport(11) : Report
    {
        BotModel[] Bots;
    }

    message PackageListRequest(12) : Request;

    message PackageListReport(13) : Report
    {
        PackageModel[] Packages;
    }

    message SubscribeRequest(14) : Request;

    message SubscribeReport(15) : Report;

    message AccountModelUpdate_1(16) : Update
    {
        AccountModel_1 Item;
    }

    message AccountModelUpdate(22) : Update
    {
        AccountModel Item;
    }

    message BotModelUpdate(17) : Update
    {
        BotModel Item;
    }

    message PackageModelUpdate(18) : Update
    {
        PackageModel Item;
    }

    message BotStateUpdate(19) : Update
    {
        ustring BotId;
        BotState State;
    }

    message AccountStateUpdate(23) : Update
    {
    	AccountKey Account;
    	ConnectionState ConnectionState;
    	ConnectionErrorModel LastError;
    }

    processor Client()
    {
    	loop
    	{
	        send LoginRequest(LoginRequest)
	        {
	            recv LoginReport(LoginReport)
	            {
	            }
	            or recv LoginReport_1(LoginReport_1)
	            {
	            }
	            or recv LoginReject(LoginReject)
	            {
	                return;
	            }
	        }

	        send (Request)
	        {
	            repeat;
	        }
	        or recv (Report)
	        {
	            repeat;
	        }
	        or recv (Update)
	        {
	            repeat;
	        }
	        or recv LogoutReport(LogoutReport)
	        {
	            return;
	        }
	        or send LogoutRequest(LogoutRequest)
	        {
	            recv (Report)
	            {
	                repeat;
	            }
	            or recv (Update)
	            {
	                repeat;
	            }
	            or recv LogoutReport(LogoutReport)
	            {
	                return;
	            }
	        }
        }
    }

    processor Server()
    {
    	loop
    	{
	        recv LoginRequest(LoginRequest)
	        {
	            send (LoginReport)
	            {
	            }
	            or send (LoginReport_1)
	            {
	            }
	            or send (LoginReject)
	            {
	                return;
	            }
	        }

	        recv (Request)
	        {
	            repeat;
	        }
	        or send (Report)
	        {
	            repeat;
	        }
	        or send (Update)
	        {
	            repeat;
	        }
	        or send (LogoutReport)
	        {
	            return;
	        }
	        or recv LogoutRequest(LogoutRequest)
	        {
	            send (Report)
	            {
	                repeat;
	            }
	            or send (Update)
	            {
	                repeat;
	            }
	            or send (LogoutReport)
	            {
	                return;
	            }
	        }
        }
    }

    processor ClientUpdate(string) : Client
    (
        Update.Id
    )
    {
        recv AccountModelUpdate(AccountModelUpdate)
        {
        }
        or recv AccountModelUpdate_1(AccountModelUpdate_1)
        {
        }
        or recv BotModelUpdate(BotModelUpdate)
        {
        }
        or recv PackageModelUpdate(PackageModelUpdate)
        {
        }
        or recv BotStateUpdate(BotStateUpdate)
        {
        }
        or recv AccountStateUpdate(AccountStateUpdate)
        {
        }
    }

    processor ServerUpdate(string) : Server
    (
        Update.Id
    )
    {
        send (AccountModelUpdate)
        {
        }
        or send (AccountModelUpdate_1)
        {
        }
        or send (BotModelUpdate)
        {
        }
        or send (PackageModelUpdate)
        {
        }
        or send (BotStateUpdate)
        {
        }
        or send (AccountStateUpdate)
        {
        }
    }

    processor ClientRequest(string) : Client
    (
        Request.Id,
        Report.RequestId
    )
    {
        send AccountListRequest(AccountListRequest)
        {
            recv AccountListReport(AccountListReport)
            {
            }
            or recv AccountListReport_1(AccountListReport_1)
            {
            }
        }
        or send BotListRequest(BotListRequest)
        {
            recv BotListReport(BotListReport)
            {
            }
        }
        or send PackageListRequest(PackageListRequest)
        {
            recv PackageListReport(PackageListReport)
            {
            }
        }
        or send SubscribeRequest(SubscribeRequest)
        {
            recv SubscribeReport(SubscribeReport)
            {
            }
        }
    }

    processor ServerRequest(string) : Server
    (
        Request.Id,
        Report.RequestId
    )
    {
        recv AccountListRequest(AccountListRequest)
        {
            send (AccountListReport)
            {
            }
            or send (AccountListReport_1)
            {
            }
        }
        or recv BotListRequest(BotListRequest)
        {
            send (BotListReport)
            {
            }
        }
        or recv PackageListRequest(PackageListRequest)
        {
            send (PackageListReport)
            {
            }
        }
        or recv SubscribeRequest(SubscribeRequest)
        {
            send (SubscribeReport)
            {
            }
        }
    }
}