<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TickTrader.Common</name>
    </assembly>
    <members>
        <member name="T:TickTrader.Common.AsyncProduceConsumer`1">
            <summary>
            Allow to build chain of task consumers
            </summary>
            <typeparam name="TTypeOfGoods"></typeparam>
        </member>
        <member name="M:TickTrader.Common.AsyncProduceConsumer`1.AddItem(`0)">
            <summary>
            Add item to process
            </summary>
            <param name="itemToProcess"></param>
        </member>
        <member name="M:TickTrader.Common.AsyncProduceConsumer`1.Shutdown(System.Boolean)">
            <summary>
            Shutdown process
            </summary>
            <param name="waitForQueueEmpty"></param>
        </member>
        <member name="M:System.CollectionExtentions.RemoveFisrt``1(System.Collections.Generic.IList{``0})">
            <summary>
            Warning! It's a heavy operation O(n).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcList"></param>
        </member>
        <member name="M:TickTrader.Common.DebugApi.Dump.Dump.WriteNormalDumpOnError(System.String)">
            <summary>
            The method specifies a path, which should be used for normal dump writing on exception/fatal error.
            </summary>
            <param name="path">a path to normal dump file</param>
        </member>
        <member name="M:TickTrader.Common.DebugApi.Dump.Dump.WriteFullDumpOnError(System.String)">
            <summary>
            The method specifies a path, which should be used for full dump writing on exception/fatal error.
            </summary>
            <param name="path">a path to full dump file</param>
        </member>
        <member name="T:TickTrader.Common.DebugApi.Dump.ProcDumpRes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TickTrader.Common.DebugApi.Dump.ProcDumpRes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TickTrader.Common.DebugApi.Dump.ProcDumpRes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TickTrader.Common.DebugApi.Dump.ProcDumpRes.procdump">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:TickTrader.Common.Locking.ObjectLocker`1">
            <summary>
            Lock/Unlock logic based on parameterized object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TickTrader.Common.Locking.ObjectLocker`1.Lock(`0)">
            <summary>
            Lock object
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TickTrader.Common.Locking.ObjectLocker`1.Unlock(`0)">
            <summary>
            Unlock Object
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TickTrader.Common.Locking.ObjectLocker`1.UnlockAll">
            <summary>
            Unlock All locked object
            </summary>
        </member>
        <member name="M:TickTrader.Common.Locking.ObjectLocker`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:TickTrader.Common.Logging.Log4NetConfigurator.UniversalDateTime">
            <summary>
            Implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime"/> that returns the current time as the coordinated universal time (UTC).
            </summary>
        </member>
        <member name="P:TickTrader.Common.Logging.Log4NetConfigurator.UniversalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
            <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:TickTrader.Common.NaturalComparer">
            <summary>
            NaturalComparer
            </summary>
        </member>
        <member name="T:TickTrader.Common.Logging.AsyncForwardingAppender">
            <summary>
            Asynchronous forwarding log appender.
            </summary>
        </member>
        <member name="M:TickTrader.Common.Logging.AsyncForwardingAppender.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:TickTrader.Common.Logging.AsyncForwardingAppender.OnClose">
            <summary>
            Override OnClose() method.
            </summary>
        </member>
        <member name="M:TickTrader.Common.Logging.AsyncForwardingAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Override Append() method.
            </summary>
        </member>
        <member name="M:TickTrader.Common.Logging.AsyncForwardingAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Override Append() method.
            </summary>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.#ctor(System.Type,TickTrader.Common.PerfCounters.SystemPerfCounters.LogDelegate)">
            <summary>
            Constructs performance counter
            </summary>
            <param name="perCountersEnumType">Type of the Enum is used for Counter name</param>
            <param name="logDelegate">log delegate</param>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.Set(System.Enum,System.Int64)">
            <summary>
            Set Couter to value
            </summary>
            <param name="cnt">Counter</param>
            <param name="value">New value</param>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.Get(System.Enum)">
            <summary>
            Set Couter to value
            </summary>
            <param name="cnt">Counter</param>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.IncrementBy(System.Enum,System.Int64)">
            <summary>
            Increment counter by value
            </summary>
            <param name="cnt">Counter</param>
            <param name="value">Increment value</param>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.Increment(System.Enum)">
            <summary>
            Increment counter by 1
            </summary>
            <param name="cnt">Counter</param>
        </member>
        <member name="M:TickTrader.Common.PerfCounters.SystemPerfCounters.Decrement(System.Enum)">
            <summary>
            Decrement counter by 1
            </summary>
            <param name="cnt">Counter</param>
        </member>
        <member name="M:TickTrader.Common.Proto.ProtoUtils.Compress(System.Byte[])">
            <summary>
            Compresses byte array to new byte array.
            </summary>
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.Generate">
            <summary>  
            Generates a random password with the default length.  
            </summary>  
            <returns>Randomly generated password.</returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.Generate(TickTrader.Common.RandomPasswordOptions)">
            <summary>  
            Generates a random password with the default length.  
            </summary>  
            <returns>Randomly generated password.</returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.Generate(System.Int32)">
            <summary>  
            Generates a random password with the default length.  
            </summary>  
            <returns>Randomly generated password.</returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.Generate(System.Int32,TickTrader.Common.RandomPasswordOptions)">
            <summary>  
            Generates a random password.  
            </summary>  
            <returns>Randomly generated password.</returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.GeneratePassword(System.Int32,TickTrader.Common.RandomPasswordOptions)">
            <summary>  
            Generates the password.  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.GetCharacters(TickTrader.Common.RandomPasswordOptions)">
            <summary>  
            Gets the characters selected by the option  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:TickTrader.Common.RandomPasswordGenerator.GetRandom">
            <summary>  
            Gets a random object with a real random seed  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:TickTrader.Common.Threading.ReaderWriterLockSlimExtensions.UnderReadLock(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            Executes an action under read lock. Warning! Some performance loss in exchange for better looking code.
            </summary>
            <param name="locker"></param>
        </member>
        <member name="M:TickTrader.Common.Threading.ReaderWriterLockSlimExtensions.UnderWriteLock(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            Executes an action under write lock. Warning! Some performance loss in exchange for better looking code.
            </summary>
            <param name="locker"></param>
        </member>
        <member name="T:TickTrader.Common.Threading.ThreadHost">
            <summary>
            Containes code to start and stop long-live thread or multiple long-live threads.
            </summary>
        </member>
        <member name="F:TickTrader.BusinessObjects.Validators.StringValidators.MatchEmailPattern">
            <summary>
            Regular expression, which is used to validate an E-Mail address.
            </summary>
        </member>
        <member name="M:TickTrader.BusinessObjects.Validators.StringValidators.IsEmailValid(System.String)">
            <summary>
            Checks whether the given Email-Parameter is a valid E-Mail address.
            </summary>
            <param name="email">Parameter-string that contains an E-Mail address.</param>
            <returns>True, when Parameter-string is not null and 
            contains a valid E-Mail address;
            otherwise false.</returns>
        </member>
        <member name="T:TickTrader.Common.WCF.ConfigurableChannelFactory`1">
            <summary>
            Configurable client channel. 
            Allows to specify a different external XML configuration file.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="remoteAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.CreateDescription">
            <summary>
            Loads the serviceEndpoint description from the specified configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            Configures the binding for the selected endpoint
            </summary>
            <param name="bindingName"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            Helper method to create the right binding depending on the configuration element
            </summary>
            <param name="configurationElement"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            Adds the configured behavior to the selected endpoint
            </summary>
            <param name="behaviorConfiguration"></param>
            <param name="serviceEndpoint"></param>
            <param name="group"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableChannelFactory`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            Gets the endpoint identity from the configuration file
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1">
            <summary>
            Configurable duplex client channel. 
            Allows to specify a different external XML configuration file.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.ServiceModel.Description.ServiceEndpoint,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="address"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="binding"></param>
            <param name="remoteAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="address"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.CreateDescription">
            <summary>
            Loads the serviceEndpoint description from the specified configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            Configures the binding for the selected endpoint
            </summary>
            <param name="bindingName"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            Helper method to create the right binding depending on the configuration element
            </summary>
            <param name="configurationElement"></param>
            <returns></returns>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            Adds the configured behavior to the selected endpoint
            </summary>
            <param name="behaviorConfiguration"></param>
            <param name="serviceEndpoint"></param>
            <param name="group"></param>
        </member>
        <member name="M:TickTrader.Common.WCF.ConfigurableDuplexChannelFactory`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            Gets the endpoint identity from the configuration file
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:TickTrader.Common.WCF.WcfModelException.OtherThread">
            <summary>
            Indicates that the exception was thrown from another thread
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceManagerRights">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.Connect">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.CreateService">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.EnumerateService">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.Lock">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.QueryLockStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.ModifyBootConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.StandardRightsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceManagerRights.AllAccess">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceRights">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.QueryConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.ChangeConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.QueryStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.EnumerateDependants">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.PauseContinue">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.Interrogate">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.UserDefinedControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.StandardRightsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceRights.AllAccess">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceBootFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceBootFlag.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceBootFlag.SystemStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceBootFlag.AutoStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceBootFlag.DemandStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceBootFlag.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceState">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.NotFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.Run">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.Stopping">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceState.Starting">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.Continue">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.Interrogate">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.ParamChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.NetBindAdd">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.NetBindRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.NetBindEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceControl.NetBindDisable">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.ServiceError">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceError.Ignore">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceError.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceError.Severe">
            <summary>
            
            </summary>
        </member>
        <member name="F:TickTrader.Common.ServiceError.Critical">
            <summary>
            
            </summary>
        </member>
        <member name="T:TickTrader.Common.WinServiceInstaller">
            <summary>
            Installs and provides functionality for handling windows services
            </summary>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.ServiceIsInstalled(System.String)">
            <summary>
            Accepts a service name and returns true if the service with that service name exists
            </summary>
            <param name="ServiceName">The service name that we will check for existence</param>
            <returns>True if that service exists false otherwise</returns>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.InstallService(System.String,System.String,System.String)">
            <summary>
            Takes a service name, a service display name and the path to the service executable and installs the windows service.
            </summary>
            <param name="ServiceName">The service name that this service will have</param>
            <param name="DisplayName">The display name that this service will have</param>
            <param name="FileName">The path to the executable of the service</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.UninstallService(System.String)">
            <summary>
            Takes a service name and tries to stop and then uninstall the windows service
            </summary>
            <param name="ServiceName">The windows service name to uninstall</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.StartService(System.String)">
            <summary>
            Takes a service name and starts it
            </summary>
            <param name="Name">The service name</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.StopService(System.String)">
            <summary>
            Stops the provided windows service
            </summary>
            <param name="Name">The service name that will be stopped</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.StopServiceEx(System.String,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Stops the provided windows service
            </summary>
            <param name="Name">The service name that will be stopped</param>
            <param name="Timeout">Timeout</param>
            <param name="KillOnTimeout">Kill on timeout flag</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.StartService(System.IntPtr)">
            <summary>
            Stars the provided windows service
            </summary>
            <param name="hService">The handle to the windows service</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.StopService(System.IntPtr)">
            <summary>
            Stops the provided windows service
            </summary>
            <param name="hService">The handle to the windows service</param>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.GetServiceStatus(System.String)">
            <summary>
            Takes a service name and returns the <code>ServiceState</code> of the corresponding service
            </summary>
            <param name="ServiceName">The service name that we will check for his <code>ServiceState</code></param>
            <returns>The ServiceState of the service we wanted to check</returns>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.GetServiceStatus(System.IntPtr)">
            <summary>
            Gets the service state by using the handle of the provided windows service
            </summary>
            <param name="hService">The handle to the service</param>
            <returns>The <code>ServiceState</code> of the service</returns>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.WaitForServiceStatus(System.IntPtr,TickTrader.Common.ServiceState,TickTrader.Common.ServiceState)">
            <summary>
            Returns true when the service status has been changes from wait status to desired status
            ,this method waits around 10 seconds for this operation.
            </summary>
            <param name="hService">The handle to the service</param>
            <param name="WaitStatus">The current state of the service</param>
            <param name="DesiredStatus">The desired state of the service</param>
            <returns>bool if the service has successfully changed states within the allowed timeline</returns>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.OpenSCManager(TickTrader.Common.ServiceManagerRights)">
            <summary>
            Opens the service manager
            </summary>
            <param name="Rights">The service manager rights</param>
            <returns>the handle to the service manager</returns>
        </member>
        <member name="M:TickTrader.Common.WinServiceInstaller.GetServiceProerties(System.String)">
            <summary>
            Get Serice's propertiest using WMO
            </summary>
            <param name="serviceName">Property name</param>
            <returns>Proeprties</returns>
        </member>
        <member name="T:TickTrader.Common.WinServiceLauncher">
            <summary>
            Allows to launch Windows Service as a console application.
            This provides easy way to debug Windows Services from Visual Studio.
            It works only in debug configurations.
            </summary>
        </member>
    </members>
</doc>
