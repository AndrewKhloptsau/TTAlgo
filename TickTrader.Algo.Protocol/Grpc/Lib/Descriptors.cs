// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: descriptors.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TickTrader.Algo.Protocol.Grpc.Lib {

  /// <summary>Holder for reflection information generated from descriptors.proto</summary>
  public static partial class DescriptorsReflection {

    #region Descriptor
    /// <summary>File descriptor for descriptors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DescriptorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFkZXNjcmlwdG9ycy5wcm90bxIhVGlja1RyYWRlci5BbGdvLlByb3RvY29s",
            "LkdycGMuTGliIqYECg1BcGlEZXNjcmlwdG9yIocBCglUaW1lRnJhbWUSFgoS",
            "VU5LTk9XTl9USU1FX0ZSQU1FEAASBgoCTU4QARIFCgFEEAISBQoBVxADEgYK",
            "Akg0EAQSBgoCSDEQBRIHCgNNMzAQBhIHCgNNMTUQBxIGCgJNNRAIEgYKAk0x",
            "EAkSBwoDUzEwEAoSBgoCUzEQCxIJCgVUaWNrcxAMInYKCUxpbmVTdHlsZRIW",
            "ChJVTktOT1dOX0xJTkVfU1RZTEUQABIJCgVTT0xJRBABEggKBERPVFMQAhIN",
            "CglET1RTX1JBUkUQAxISCg5ET1RTX1ZFUllfUkFSRRAEEg4KCkxJTkVTX0RP",
            "VFMQBRIJCgVMSU5FUxAGIl4KCFBsb3RUeXBlEhUKEVVOS05PV05fUExPVF9U",
            "WVBFEAASCAoETElORRABEg0KCUhJU1RPR1JBTRACEgoKBlBPSU5UUxADEhYK",
            "EkRJU0NPTlRJTlVPVVNfTElORRAEImoKDE91dHB1dFRhcmdldBIZChVVTktO",
            "T1dOX09VVFBVVF9UQVJHRVQQABILCgdPVkVSTEFZEAESCwoHV0lORE9XMRAC",
            "EgsKB1dJTkRPVzIQAxILCgdXSU5ET1czEAQSCwoHV0lORE9XNBAFIkcKCk1h",
            "cmtlclNpemUSFwoTVU5LTk9XTl9NQVJLRVJfU0laRRAAEgkKBUxhcmdlEAES",
            "CgoGTWVkaXVtEAISCQoFU21hbGwQAyKRBAoSUHJvcGVydHlEZXNjcmlwdG9y",
            "EgoKAmlkGAEgASgJEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRJdCg1wcm9wZXJ0",
            "eV90eXBlGAMgASgOMkYuVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMu",
            "TGliLlByb3BlcnR5RGVzY3JpcHRvci5BbGdvUHJvcGVydHlUeXBlElYKBWVy",
            "cm9yGAQgASgOMkcuVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGli",
            "LlByb3BlcnR5RGVzY3JpcHRvci5BbGdvUHJvcGVydHlFcnJvciJhChBBbGdv",
            "UHJvcGVydHlUeXBlEhkKFVVOS05PV05fUFJPUEVSVFlfVFlQRRAAEg0KCVBB",
            "UkFNRVRFUhABEhAKDElOUFVUX1NFUklFUxACEhEKDU9VVFBVVF9TRVJJRVMQ",
            "AyK+AQoRQWxnb1Byb3BlcnR5RXJyb3ISCAoETk9ORRAAEgsKB1VOS05PV04Q",
            "ARIVChFTRVRfSVNfTk9UX1BVQkxJQxACEhUKEUdFVF9JU19OT1RfUFVCTElD",
            "EAMSFwoTTVVMVElQTEVfQVRUUklCVVRFUxAEEhwKGElOUFVUX0lTX05PVF9E",
            "QVRBX1NFUklFUxAFEh0KGU9VVFBVVF9JU19OT1RfREFUQV9TRVJJRVMQBhIO",
            "CgpFTVBUWV9FTlVNEAciPAoPRmlsZUZpbHRlckVudHJ5EhYKDmZpbGVfdHlw",
            "ZV9uYW1lGAEgASgJEhEKCWZpbGVfbWFzaxgCIAEoCSKUAgoTUGFyYW1ldGVy",
            "RGVzY3JpcHRvchJOCg9wcm9wZXJ0eV9oZWFkZXIYASABKAsyNS5UaWNrVHJh",
            "ZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuUHJvcGVydHlEZXNjcmlwdG9y",
            "EhEKCWRhdGFfdHlwZRgCIAEoCRIVCg1kZWZhdWx0X3ZhbHVlGAMgASgJEhMK",
            "C2lzX3JlcXVpcmVkGAQgASgIEg8KB2lzX2VudW0YBSABKAgSEwoLZW51bV92",
            "YWx1ZXMYBiADKAkSSAoMZmlsZV9maWx0ZXJzGAcgAygLMjIuVGlja1RyYWRl",
            "ci5BbGdvLlByb3RvY29sLkdycGMuTGliLkZpbGVGaWx0ZXJFbnRyeSKKAQoP",
            "SW5wdXREZXNjcmlwdG9yEk4KD3Byb3BlcnR5X2hlYWRlchgBIAEoCzI1LlRp",
            "Y2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5Qcm9wZXJ0eURlc2Ny",
            "aXB0b3ISJwofZGF0YV9zZXJpZXNfYmFzZV90eXBlX2Z1bGxfbmFtZRgCIAEo",
            "CSLYAwoQT3V0cHV0RGVzY3JpcHRvchJOCg9wcm9wZXJ0eV9oZWFkZXIYASAB",
            "KAsyNS5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuUHJvcGVy",
            "dHlEZXNjcmlwdG9yEicKH2RhdGFfc2VyaWVzX2Jhc2VfdHlwZV9mdWxsX25h",
            "bWUYAiABKAkSGQoRZGVmYXVsdF90aGlja25lc3MYAyABKAESFQoNZGVmYXVs",
            "dF9jb2xvchgEIAEoBRJWChJkZWZhdWx0X2xpbmVfc3R5bGUYBSABKA4yOi5U",
            "aWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wuR3JwYy5MaWIuQXBpRGVzY3JpcHRv",
            "ci5MaW5lU3R5bGUSTAoJcGxvdF90eXBlGAYgASgOMjkuVGlja1RyYWRlci5B",
            "bGdvLlByb3RvY29sLkdycGMuTGliLkFwaURlc2NyaXB0b3IuUGxvdFR5cGUS",
            "TQoGdGFyZ2V0GAcgASgOMj0uVGlja1RyYWRlci5BbGdvLlByb3RvY29sLkdy",
            "cGMuTGliLkFwaURlc2NyaXB0b3IuT3V0cHV0VGFyZ2V0EhEKCXByZWNpc2lv",
            "bhgIIAEoBRIRCgl6ZXJvX2xpbmUYCSABKAEigAYKEFBsdWdpbkRlc2NyaXB0",
            "b3ISFwoPYXBpX3ZlcnNpb25fc3RyGAEgASgJEgoKAmlkGAIgASgJEhQKDGRp",
            "c3BsYXlfbmFtZRgDIAEoCRJKCgR0eXBlGAQgASgOMjwuVGlja1RyYWRlci5B",
            "bGdvLlByb3RvY29sLkdycGMuTGliLlBsdWdpbkRlc2NyaXB0b3IuQWxnb1R5",
            "cGUSVAoFZXJyb3IYBSABKA4yRS5UaWNrVHJhZGVyLkFsZ28uUHJvdG9jb2wu",
            "R3JwYy5MaWIuUGx1Z2luRGVzY3JpcHRvci5BbGdvTWV0YWRhdGFFcnJvchIX",
            "Cg91aV9kaXNwbGF5X25hbWUYBiABKAkSEAoIY2F0ZWdvcnkYByABKAkSDwoH",
            "dmVyc2lvbhgIIAEoCRITCgtkZXNjcmlwdGlvbhgJIAEoCRIRCgljb3B5cmln",
            "aHQYCiABKAkSSgoKcGFyYW1ldGVycxgLIAMoCzI2LlRpY2tUcmFkZXIuQWxn",
            "by5Qcm90b2NvbC5HcnBjLkxpYi5QYXJhbWV0ZXJEZXNjcmlwdG9yEkIKBmlu",
            "cHV0cxgMIAMoCzIyLlRpY2tUcmFkZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxp",
            "Yi5JbnB1dERlc2NyaXB0b3ISRAoHb3V0cHV0cxgNIAMoCzIzLlRpY2tUcmFk",
            "ZXIuQWxnby5Qcm90b2NvbC5HcnBjLkxpYi5PdXRwdXREZXNjcmlwdG9yEhkK",
            "EXNldHVwX21haW5fc3ltYm9sGA4gASgIIj0KCEFsZ29UeXBlEhcKE1VOS05P",
            "V05fUExVR0lOX1RZUEUQABINCglJTkRJQ0FUT1IQARIJCgVST0JPVBACInsK",
            "EUFsZ29NZXRhZGF0YUVycm9yEggKBE5PTkUQABILCgdVTktOT1dOEAESGgoW",
            "SEFTX0lOVkFMSURfUFJPUEVSVElFUxACEhUKEVVOS05PV05fQkFTRV9UWVBF",
            "EAMSHAoYSU5DT01QQVRJQkxFX0FQSV9WRVJTSU9OEAQiqgIKE1JlZHVjdGlv",
            "bkRlc2NyaXB0b3ISFwoPYXBpX3ZlcnNpb25fc3RyGAEgASgJEgoKAmlkGAIg",
            "ASgJEhQKDGRpc3BsYXlfbmFtZRgDIAEoCRJSCgR0eXBlGAQgASgOMkQuVGlj",
            "a1RyYWRlci5BbGdvLlByb3RvY29sLkdycGMuTGliLlJlZHVjdGlvbkRlc2Ny",
            "aXB0b3IuUmVkdWN0aW9uVHlwZSKDAQoNUmVkdWN0aW9uVHlwZRILCgdVTktO",
            "T1dOEAASEQoNQkFSX1RPX0RPVUJMRRABEhYKEkZVTExfQkFSX1RPX0RPVUJM",
            "RRACEhMKD0ZVTExfQkFSX1RPX0JBUhADEhMKD1FVT1RFX1RPX0RPVUJMRRAE",
            "EhAKDFFVT1RFX1RPX0JBUhAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Parser, null, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.TimeFrame), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.PlotType), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.OutputTarget), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.MarkerSize) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Parser, new[]{ "Id", "DisplayName", "PropertyType", "Error" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyType), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyError) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry), global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry.Parser, new[]{ "FileTypeName", "FileMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor.Parser, new[]{ "PropertyHeader", "DataType", "DefaultValue", "IsRequired", "IsEnum", "EnumValues", "FileFilters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor.Parser, new[]{ "PropertyHeader", "DataSeriesBaseTypeFullName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor.Parser, new[]{ "PropertyHeader", "DataSeriesBaseTypeFullName", "DefaultThickness", "DefaultColor", "DefaultLineStyle", "PlotType", "Target", "Precision", "ZeroLine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Parser, new[]{ "ApiVersionStr", "Id", "DisplayName", "Type", "Error", "UiDisplayName", "Category", "Version", "Description", "Copyright", "Parameters", "Inputs", "Outputs", "SetupMainSymbol" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoType), typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoMetadataError) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor), global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor.Parser, new[]{ "ApiVersionStr", "Id", "DisplayName", "Type" }, null, new[]{ typeof(global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor.Types.ReductionType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ApiDescriptor : pb::IMessage<ApiDescriptor> {
    private static readonly pb::MessageParser<ApiDescriptor> _parser = new pb::MessageParser<ApiDescriptor>(() => new ApiDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescriptor(ApiDescriptor other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescriptor Clone() {
      return new ApiDescriptor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiDescriptor other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ApiDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TimeFrame {
        [pbr::OriginalName("UNKNOWN_TIME_FRAME")] UnknownTimeFrame = 0,
        [pbr::OriginalName("MN")] Mn = 1,
        [pbr::OriginalName("D")] D = 2,
        [pbr::OriginalName("W")] W = 3,
        [pbr::OriginalName("H4")] H4 = 4,
        [pbr::OriginalName("H1")] H1 = 5,
        [pbr::OriginalName("M30")] M30 = 6,
        [pbr::OriginalName("M15")] M15 = 7,
        [pbr::OriginalName("M5")] M5 = 8,
        [pbr::OriginalName("M1")] M1 = 9,
        [pbr::OriginalName("S10")] S10 = 10,
        [pbr::OriginalName("S1")] S1 = 11,
        [pbr::OriginalName("Ticks")] Ticks = 12,
      }

      public enum LineStyle {
        [pbr::OriginalName("UNKNOWN_LINE_STYLE")] UnknownLineStyle = 0,
        [pbr::OriginalName("SOLID")] Solid = 1,
        [pbr::OriginalName("DOTS")] Dots = 2,
        [pbr::OriginalName("DOTS_RARE")] DotsRare = 3,
        [pbr::OriginalName("DOTS_VERY_RARE")] DotsVeryRare = 4,
        [pbr::OriginalName("LINES_DOTS")] LinesDots = 5,
        [pbr::OriginalName("LINES")] Lines = 6,
      }

      public enum PlotType {
        [pbr::OriginalName("UNKNOWN_PLOT_TYPE")] UnknownPlotType = 0,
        [pbr::OriginalName("LINE")] Line = 1,
        [pbr::OriginalName("HISTOGRAM")] Histogram = 2,
        [pbr::OriginalName("POINTS")] Points = 3,
        [pbr::OriginalName("DISCONTINUOUS_LINE")] DiscontinuousLine = 4,
      }

      public enum OutputTarget {
        [pbr::OriginalName("UNKNOWN_OUTPUT_TARGET")] UnknownOutputTarget = 0,
        [pbr::OriginalName("OVERLAY")] Overlay = 1,
        [pbr::OriginalName("WINDOW1")] Window1 = 2,
        [pbr::OriginalName("WINDOW2")] Window2 = 3,
        [pbr::OriginalName("WINDOW3")] Window3 = 4,
        [pbr::OriginalName("WINDOW4")] Window4 = 5,
      }

      public enum MarkerSize {
        [pbr::OriginalName("UNKNOWN_MARKER_SIZE")] UnknownMarkerSize = 0,
        [pbr::OriginalName("Large")] Large = 1,
        [pbr::OriginalName("Medium")] Medium = 2,
        [pbr::OriginalName("Small")] Small = 3,
      }

    }
    #endregion

  }

  public sealed partial class PropertyDescriptor : pb::IMessage<PropertyDescriptor> {
    private static readonly pb::MessageParser<PropertyDescriptor> _parser = new pb::MessageParser<PropertyDescriptor>(() => new PropertyDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDescriptor(PropertyDescriptor other) : this() {
      id_ = other.id_;
      displayName_ = other.displayName_;
      propertyType_ = other.propertyType_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDescriptor Clone() {
      return new PropertyDescriptor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_type" field.</summary>
    public const int PropertyTypeFieldNumber = 3;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyType propertyType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyType PropertyType {
      get { return propertyType_; }
      set {
        propertyType_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyError error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyError Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DisplayName != other.DisplayName) return false;
      if (PropertyType != other.PropertyType) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (PropertyType != 0) hash ^= PropertyType.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (PropertyType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PropertyType);
      }
      if (Error != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (PropertyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PropertyType);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.PropertyType != 0) {
        PropertyType = other.PropertyType;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 24: {
            propertyType_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyType) input.ReadEnum();
            break;
          }
          case 32: {
            error_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor.Types.AlgoPropertyError) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PropertyDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AlgoPropertyType {
        [pbr::OriginalName("UNKNOWN_PROPERTY_TYPE")] UnknownPropertyType = 0,
        [pbr::OriginalName("PARAMETER")] Parameter = 1,
        [pbr::OriginalName("INPUT_SERIES")] InputSeries = 2,
        [pbr::OriginalName("OUTPUT_SERIES")] OutputSeries = 3,
      }

      public enum AlgoPropertyError {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("SET_IS_NOT_PUBLIC")] SetIsNotPublic = 2,
        [pbr::OriginalName("GET_IS_NOT_PUBLIC")] GetIsNotPublic = 3,
        [pbr::OriginalName("MULTIPLE_ATTRIBUTES")] MultipleAttributes = 4,
        [pbr::OriginalName("INPUT_IS_NOT_DATA_SERIES")] InputIsNotDataSeries = 5,
        [pbr::OriginalName("OUTPUT_IS_NOT_DATA_SERIES")] OutputIsNotDataSeries = 6,
        [pbr::OriginalName("EMPTY_ENUM")] EmptyEnum = 7,
      }

    }
    #endregion

  }

  public sealed partial class FileFilterEntry : pb::IMessage<FileFilterEntry> {
    private static readonly pb::MessageParser<FileFilterEntry> _parser = new pb::MessageParser<FileFilterEntry>(() => new FileFilterEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileFilterEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileFilterEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileFilterEntry(FileFilterEntry other) : this() {
      fileTypeName_ = other.fileTypeName_;
      fileMask_ = other.fileMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileFilterEntry Clone() {
      return new FileFilterEntry(this);
    }

    /// <summary>Field number for the "file_type_name" field.</summary>
    public const int FileTypeNameFieldNumber = 1;
    private string fileTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileTypeName {
      get { return fileTypeName_; }
      set {
        fileTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_mask" field.</summary>
    public const int FileMaskFieldNumber = 2;
    private string fileMask_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileMask {
      get { return fileMask_; }
      set {
        fileMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileFilterEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileFilterEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileTypeName != other.FileTypeName) return false;
      if (FileMask != other.FileMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileTypeName.Length != 0) hash ^= FileTypeName.GetHashCode();
      if (FileMask.Length != 0) hash ^= FileMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileTypeName);
      }
      if (FileMask.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileTypeName);
      }
      if (FileMask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileFilterEntry other) {
      if (other == null) {
        return;
      }
      if (other.FileTypeName.Length != 0) {
        FileTypeName = other.FileTypeName;
      }
      if (other.FileMask.Length != 0) {
        FileMask = other.FileMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileTypeName = input.ReadString();
            break;
          }
          case 18: {
            FileMask = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParameterDescriptor : pb::IMessage<ParameterDescriptor> {
    private static readonly pb::MessageParser<ParameterDescriptor> _parser = new pb::MessageParser<ParameterDescriptor>(() => new ParameterDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterDescriptor(ParameterDescriptor other) : this() {
      PropertyHeader = other.propertyHeader_ != null ? other.PropertyHeader.Clone() : null;
      dataType_ = other.dataType_;
      defaultValue_ = other.defaultValue_;
      isRequired_ = other.isRequired_;
      isEnum_ = other.isEnum_;
      enumValues_ = other.enumValues_.Clone();
      fileFilters_ = other.fileFilters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterDescriptor Clone() {
      return new ParameterDescriptor(this);
    }

    /// <summary>Field number for the "property_header" field.</summary>
    public const int PropertyHeaderFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor propertyHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor PropertyHeader {
      get { return propertyHeader_; }
      set {
        propertyHeader_ = value;
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private string dataType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataType {
      get { return dataType_; }
      set {
        dataType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 3;
    private string defaultValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_required" field.</summary>
    public const int IsRequiredFieldNumber = 4;
    private bool isRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRequired {
      get { return isRequired_; }
      set {
        isRequired_ = value;
      }
    }

    /// <summary>Field number for the "is_enum" field.</summary>
    public const int IsEnumFieldNumber = 5;
    private bool isEnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnum {
      get { return isEnum_; }
      set {
        isEnum_ = value;
      }
    }

    /// <summary>Field number for the "enum_values" field.</summary>
    public const int EnumValuesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_enumValues_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> enumValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> EnumValues {
      get { return enumValues_; }
    }

    /// <summary>Field number for the "file_filters" field.</summary>
    public const int FileFiltersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry> _repeated_fileFilters_codec
        = pb::FieldCodec.ForMessage(58, global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry> fileFilters_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.FileFilterEntry> FileFilters {
      get { return fileFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PropertyHeader, other.PropertyHeader)) return false;
      if (DataType != other.DataType) return false;
      if (DefaultValue != other.DefaultValue) return false;
      if (IsRequired != other.IsRequired) return false;
      if (IsEnum != other.IsEnum) return false;
      if(!enumValues_.Equals(other.enumValues_)) return false;
      if(!fileFilters_.Equals(other.fileFilters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (propertyHeader_ != null) hash ^= PropertyHeader.GetHashCode();
      if (DataType.Length != 0) hash ^= DataType.GetHashCode();
      if (DefaultValue.Length != 0) hash ^= DefaultValue.GetHashCode();
      if (IsRequired != false) hash ^= IsRequired.GetHashCode();
      if (IsEnum != false) hash ^= IsEnum.GetHashCode();
      hash ^= enumValues_.GetHashCode();
      hash ^= fileFilters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (propertyHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PropertyHeader);
      }
      if (DataType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataType);
      }
      if (DefaultValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DefaultValue);
      }
      if (IsRequired != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRequired);
      }
      if (IsEnum != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnum);
      }
      enumValues_.WriteTo(output, _repeated_enumValues_codec);
      fileFilters_.WriteTo(output, _repeated_fileFilters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (propertyHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyHeader);
      }
      if (DataType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataType);
      }
      if (DefaultValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultValue);
      }
      if (IsRequired != false) {
        size += 1 + 1;
      }
      if (IsEnum != false) {
        size += 1 + 1;
      }
      size += enumValues_.CalculateSize(_repeated_enumValues_codec);
      size += fileFilters_.CalculateSize(_repeated_fileFilters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.propertyHeader_ != null) {
        if (propertyHeader_ == null) {
          propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
        }
        PropertyHeader.MergeFrom(other.PropertyHeader);
      }
      if (other.DataType.Length != 0) {
        DataType = other.DataType;
      }
      if (other.DefaultValue.Length != 0) {
        DefaultValue = other.DefaultValue;
      }
      if (other.IsRequired != false) {
        IsRequired = other.IsRequired;
      }
      if (other.IsEnum != false) {
        IsEnum = other.IsEnum;
      }
      enumValues_.Add(other.enumValues_);
      fileFilters_.Add(other.fileFilters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (propertyHeader_ == null) {
              propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
            }
            input.ReadMessage(propertyHeader_);
            break;
          }
          case 18: {
            DataType = input.ReadString();
            break;
          }
          case 26: {
            DefaultValue = input.ReadString();
            break;
          }
          case 32: {
            IsRequired = input.ReadBool();
            break;
          }
          case 40: {
            IsEnum = input.ReadBool();
            break;
          }
          case 50: {
            enumValues_.AddEntriesFrom(input, _repeated_enumValues_codec);
            break;
          }
          case 58: {
            fileFilters_.AddEntriesFrom(input, _repeated_fileFilters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputDescriptor : pb::IMessage<InputDescriptor> {
    private static readonly pb::MessageParser<InputDescriptor> _parser = new pb::MessageParser<InputDescriptor>(() => new InputDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDescriptor(InputDescriptor other) : this() {
      PropertyHeader = other.propertyHeader_ != null ? other.PropertyHeader.Clone() : null;
      dataSeriesBaseTypeFullName_ = other.dataSeriesBaseTypeFullName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputDescriptor Clone() {
      return new InputDescriptor(this);
    }

    /// <summary>Field number for the "property_header" field.</summary>
    public const int PropertyHeaderFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor propertyHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor PropertyHeader {
      get { return propertyHeader_; }
      set {
        propertyHeader_ = value;
      }
    }

    /// <summary>Field number for the "data_series_base_type_full_name" field.</summary>
    public const int DataSeriesBaseTypeFullNameFieldNumber = 2;
    private string dataSeriesBaseTypeFullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataSeriesBaseTypeFullName {
      get { return dataSeriesBaseTypeFullName_; }
      set {
        dataSeriesBaseTypeFullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PropertyHeader, other.PropertyHeader)) return false;
      if (DataSeriesBaseTypeFullName != other.DataSeriesBaseTypeFullName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (propertyHeader_ != null) hash ^= PropertyHeader.GetHashCode();
      if (DataSeriesBaseTypeFullName.Length != 0) hash ^= DataSeriesBaseTypeFullName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (propertyHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PropertyHeader);
      }
      if (DataSeriesBaseTypeFullName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataSeriesBaseTypeFullName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (propertyHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyHeader);
      }
      if (DataSeriesBaseTypeFullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSeriesBaseTypeFullName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.propertyHeader_ != null) {
        if (propertyHeader_ == null) {
          propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
        }
        PropertyHeader.MergeFrom(other.PropertyHeader);
      }
      if (other.DataSeriesBaseTypeFullName.Length != 0) {
        DataSeriesBaseTypeFullName = other.DataSeriesBaseTypeFullName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (propertyHeader_ == null) {
              propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
            }
            input.ReadMessage(propertyHeader_);
            break;
          }
          case 18: {
            DataSeriesBaseTypeFullName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutputDescriptor : pb::IMessage<OutputDescriptor> {
    private static readonly pb::MessageParser<OutputDescriptor> _parser = new pb::MessageParser<OutputDescriptor>(() => new OutputDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutputDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputDescriptor(OutputDescriptor other) : this() {
      PropertyHeader = other.propertyHeader_ != null ? other.PropertyHeader.Clone() : null;
      dataSeriesBaseTypeFullName_ = other.dataSeriesBaseTypeFullName_;
      defaultThickness_ = other.defaultThickness_;
      defaultColor_ = other.defaultColor_;
      defaultLineStyle_ = other.defaultLineStyle_;
      plotType_ = other.plotType_;
      target_ = other.target_;
      precision_ = other.precision_;
      zeroLine_ = other.zeroLine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutputDescriptor Clone() {
      return new OutputDescriptor(this);
    }

    /// <summary>Field number for the "property_header" field.</summary>
    public const int PropertyHeaderFieldNumber = 1;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor propertyHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor PropertyHeader {
      get { return propertyHeader_; }
      set {
        propertyHeader_ = value;
      }
    }

    /// <summary>Field number for the "data_series_base_type_full_name" field.</summary>
    public const int DataSeriesBaseTypeFullNameFieldNumber = 2;
    private string dataSeriesBaseTypeFullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataSeriesBaseTypeFullName {
      get { return dataSeriesBaseTypeFullName_; }
      set {
        dataSeriesBaseTypeFullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_thickness" field.</summary>
    public const int DefaultThicknessFieldNumber = 3;
    private double defaultThickness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DefaultThickness {
      get { return defaultThickness_; }
      set {
        defaultThickness_ = value;
      }
    }

    /// <summary>Field number for the "default_color" field.</summary>
    public const int DefaultColorFieldNumber = 4;
    private int defaultColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultColor {
      get { return defaultColor_; }
      set {
        defaultColor_ = value;
      }
    }

    /// <summary>Field number for the "default_line_style" field.</summary>
    public const int DefaultLineStyleFieldNumber = 5;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle defaultLineStyle_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle DefaultLineStyle {
      get { return defaultLineStyle_; }
      set {
        defaultLineStyle_ = value;
      }
    }

    /// <summary>Field number for the "plot_type" field.</summary>
    public const int PlotTypeFieldNumber = 6;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.PlotType plotType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.PlotType PlotType {
      get { return plotType_; }
      set {
        plotType_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 7;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.OutputTarget target_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.OutputTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 8;
    private int precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "zero_line" field.</summary>
    public const int ZeroLineFieldNumber = 9;
    private double zeroLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ZeroLine {
      get { return zeroLine_; }
      set {
        zeroLine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutputDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutputDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PropertyHeader, other.PropertyHeader)) return false;
      if (DataSeriesBaseTypeFullName != other.DataSeriesBaseTypeFullName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DefaultThickness, other.DefaultThickness)) return false;
      if (DefaultColor != other.DefaultColor) return false;
      if (DefaultLineStyle != other.DefaultLineStyle) return false;
      if (PlotType != other.PlotType) return false;
      if (Target != other.Target) return false;
      if (Precision != other.Precision) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ZeroLine, other.ZeroLine)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (propertyHeader_ != null) hash ^= PropertyHeader.GetHashCode();
      if (DataSeriesBaseTypeFullName.Length != 0) hash ^= DataSeriesBaseTypeFullName.GetHashCode();
      if (DefaultThickness != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DefaultThickness);
      if (DefaultColor != 0) hash ^= DefaultColor.GetHashCode();
      if (DefaultLineStyle != 0) hash ^= DefaultLineStyle.GetHashCode();
      if (PlotType != 0) hash ^= PlotType.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (ZeroLine != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ZeroLine);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (propertyHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PropertyHeader);
      }
      if (DataSeriesBaseTypeFullName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataSeriesBaseTypeFullName);
      }
      if (DefaultThickness != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(DefaultThickness);
      }
      if (DefaultColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultColor);
      }
      if (DefaultLineStyle != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DefaultLineStyle);
      }
      if (PlotType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PlotType);
      }
      if (Target != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Target);
      }
      if (Precision != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Precision);
      }
      if (ZeroLine != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ZeroLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (propertyHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyHeader);
      }
      if (DataSeriesBaseTypeFullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataSeriesBaseTypeFullName);
      }
      if (DefaultThickness != 0D) {
        size += 1 + 8;
      }
      if (DefaultColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultColor);
      }
      if (DefaultLineStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultLineStyle);
      }
      if (PlotType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlotType);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Target);
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (ZeroLine != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutputDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.propertyHeader_ != null) {
        if (propertyHeader_ == null) {
          propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
        }
        PropertyHeader.MergeFrom(other.PropertyHeader);
      }
      if (other.DataSeriesBaseTypeFullName.Length != 0) {
        DataSeriesBaseTypeFullName = other.DataSeriesBaseTypeFullName;
      }
      if (other.DefaultThickness != 0D) {
        DefaultThickness = other.DefaultThickness;
      }
      if (other.DefaultColor != 0) {
        DefaultColor = other.DefaultColor;
      }
      if (other.DefaultLineStyle != 0) {
        DefaultLineStyle = other.DefaultLineStyle;
      }
      if (other.PlotType != 0) {
        PlotType = other.PlotType;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.ZeroLine != 0D) {
        ZeroLine = other.ZeroLine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (propertyHeader_ == null) {
              propertyHeader_ = new global::TickTrader.Algo.Protocol.Grpc.Lib.PropertyDescriptor();
            }
            input.ReadMessage(propertyHeader_);
            break;
          }
          case 18: {
            DataSeriesBaseTypeFullName = input.ReadString();
            break;
          }
          case 25: {
            DefaultThickness = input.ReadDouble();
            break;
          }
          case 32: {
            DefaultColor = input.ReadInt32();
            break;
          }
          case 40: {
            defaultLineStyle_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.LineStyle) input.ReadEnum();
            break;
          }
          case 48: {
            plotType_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.PlotType) input.ReadEnum();
            break;
          }
          case 56: {
            target_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ApiDescriptor.Types.OutputTarget) input.ReadEnum();
            break;
          }
          case 64: {
            Precision = input.ReadInt32();
            break;
          }
          case 73: {
            ZeroLine = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PluginDescriptor : pb::IMessage<PluginDescriptor> {
    private static readonly pb::MessageParser<PluginDescriptor> _parser = new pb::MessageParser<PluginDescriptor>(() => new PluginDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PluginDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginDescriptor(PluginDescriptor other) : this() {
      apiVersionStr_ = other.apiVersionStr_;
      id_ = other.id_;
      displayName_ = other.displayName_;
      type_ = other.type_;
      error_ = other.error_;
      uiDisplayName_ = other.uiDisplayName_;
      category_ = other.category_;
      version_ = other.version_;
      description_ = other.description_;
      copyright_ = other.copyright_;
      parameters_ = other.parameters_.Clone();
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      setupMainSymbol_ = other.setupMainSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PluginDescriptor Clone() {
      return new PluginDescriptor(this);
    }

    /// <summary>Field number for the "api_version_str" field.</summary>
    public const int ApiVersionStrFieldNumber = 1;
    private string apiVersionStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiVersionStr {
      get { return apiVersionStr_; }
      set {
        apiVersionStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 5;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoMetadataError error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoMetadataError Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "ui_display_name" field.</summary>
    public const int UiDisplayNameFieldNumber = 6;
    private string uiDisplayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UiDisplayName {
      get { return uiDisplayName_; }
      set {
        uiDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 7;
    private string category_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 9;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 10;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 11;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(90, global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor> parameters_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.ParameterDescriptor> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(98, global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor> inputs_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.InputDescriptor> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(106, global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor.Parser);
    private readonly pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor> outputs_ = new pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TickTrader.Algo.Protocol.Grpc.Lib.OutputDescriptor> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "setup_main_symbol" field.</summary>
    public const int SetupMainSymbolFieldNumber = 14;
    private bool setupMainSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetupMainSymbol {
      get { return setupMainSymbol_; }
      set {
        setupMainSymbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PluginDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PluginDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiVersionStr != other.ApiVersionStr) return false;
      if (Id != other.Id) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if (UiDisplayName != other.UiDisplayName) return false;
      if (Category != other.Category) return false;
      if (Version != other.Version) return false;
      if (Description != other.Description) return false;
      if (Copyright != other.Copyright) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (SetupMainSymbol != other.SetupMainSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiVersionStr.Length != 0) hash ^= ApiVersionStr.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (UiDisplayName.Length != 0) hash ^= UiDisplayName.GetHashCode();
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      hash ^= parameters_.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (SetupMainSymbol != false) hash ^= SetupMainSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiVersionStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApiVersionStr);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Error != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Error);
      }
      if (UiDisplayName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UiDisplayName);
      }
      if (Category.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Category);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Description);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Copyright);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (SetupMainSymbol != false) {
        output.WriteRawTag(112);
        output.WriteBool(SetupMainSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiVersionStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiVersionStr);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (UiDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UiDisplayName);
      }
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (SetupMainSymbol != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PluginDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.ApiVersionStr.Length != 0) {
        ApiVersionStr = other.ApiVersionStr;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.UiDisplayName.Length != 0) {
        UiDisplayName = other.UiDisplayName;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      parameters_.Add(other.parameters_);
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      if (other.SetupMainSymbol != false) {
        SetupMainSymbol = other.SetupMainSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ApiVersionStr = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoType) input.ReadEnum();
            break;
          }
          case 40: {
            error_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.PluginDescriptor.Types.AlgoMetadataError) input.ReadEnum();
            break;
          }
          case 50: {
            UiDisplayName = input.ReadString();
            break;
          }
          case 58: {
            Category = input.ReadString();
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            Description = input.ReadString();
            break;
          }
          case 82: {
            Copyright = input.ReadString();
            break;
          }
          case 90: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 98: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 106: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 112: {
            SetupMainSymbol = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PluginDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AlgoType {
        [pbr::OriginalName("UNKNOWN_PLUGIN_TYPE")] UnknownPluginType = 0,
        [pbr::OriginalName("INDICATOR")] Indicator = 1,
        [pbr::OriginalName("ROBOT")] Robot = 2,
      }

      public enum AlgoMetadataError {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("HAS_INVALID_PROPERTIES")] HasInvalidProperties = 2,
        [pbr::OriginalName("UNKNOWN_BASE_TYPE")] UnknownBaseType = 3,
        [pbr::OriginalName("INCOMPATIBLE_API_VERSION")] IncompatibleApiVersion = 4,
      }

    }
    #endregion

  }

  public sealed partial class ReductionDescriptor : pb::IMessage<ReductionDescriptor> {
    private static readonly pb::MessageParser<ReductionDescriptor> _parser = new pb::MessageParser<ReductionDescriptor>(() => new ReductionDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReductionDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TickTrader.Algo.Protocol.Grpc.Lib.DescriptorsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionDescriptor(ReductionDescriptor other) : this() {
      apiVersionStr_ = other.apiVersionStr_;
      id_ = other.id_;
      displayName_ = other.displayName_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionDescriptor Clone() {
      return new ReductionDescriptor(this);
    }

    /// <summary>Field number for the "api_version_str" field.</summary>
    public const int ApiVersionStrFieldNumber = 1;
    private string apiVersionStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiVersionStr {
      get { return apiVersionStr_; }
      set {
        apiVersionStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor.Types.ReductionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor.Types.ReductionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReductionDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReductionDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiVersionStr != other.ApiVersionStr) return false;
      if (Id != other.Id) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiVersionStr.Length != 0) hash ^= ApiVersionStr.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiVersionStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApiVersionStr);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiVersionStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiVersionStr);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReductionDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.ApiVersionStr.Length != 0) {
        ApiVersionStr = other.ApiVersionStr;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ApiVersionStr = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::TickTrader.Algo.Protocol.Grpc.Lib.ReductionDescriptor.Types.ReductionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReductionDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReductionType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("BAR_TO_DOUBLE")] BarToDouble = 1,
        [pbr::OriginalName("FULL_BAR_TO_DOUBLE")] FullBarToDouble = 2,
        [pbr::OriginalName("FULL_BAR_TO_BAR")] FullBarToBar = 3,
        [pbr::OriginalName("QUOTE_TO_DOUBLE")] QuoteToDouble = 4,
        [pbr::OriginalName("QUOTE_TO_BAR")] QuoteToBar = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
